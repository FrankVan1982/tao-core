/**
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; under version 2
 * of the License (non-upgradable).
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 *
 * Copyright (c) 2014 (original work) Open Assessment Technologies SA (under the project TAO-PRODUCT);
 * 
 * 
 */

//@see http://forge.taotesting.com/projects/tao/wiki/Front_js
define('tao/controller/routes',[],function(){
    

    return {
        'Main': {
            'actions' : {
                'index' : 'controller/main',
                'getSectionActions' : 'controller/main/actions',
                'getSectionTrees' : 'controller/main/trees'
            }
        },
        'ExtensionsManager' : {
            'actions' : {
                'index' : 'controller/settings/extensionManager'
            }
        },
        'Lists' : {
            'actions' : {
                'index' : 'controller/list/index'
            }
        }
    };
});

define('tao/controller/list/index',['jquery', 'i18n', 'helpers', 'context'], function($, __, helpers, context){
    
    return {
        
        start : function (){
            
            var saveUrl = helpers._url('saveLists', 'Lists', 'tao');
            var delListUrl = helpers._url('removeList', 'Lists', 'tao');
            var delEltUrl = helpers._url('removeListElement', 'Lists', 'tao');

            $(".list-editor").click(function(){
                    var uri = $(this).attr('id').replace('list-editor_', '');
                    var listContainer = $("div[id='list-data_" + uri+"']");

                    if(!listContainer.parent().is('form')){
                            listContainer.wrap("<form class='listbox' />");
                            listContainer.prepend("<input type='hidden' name='uri' value='"+uri+"' />");

                            $("<input type='text' name='label' value='"+listContainer.find('legend span').text()+"'/>").prependTo(listContainer.find('div.list-elements')).keyup(function(){
                                    listContainer.find('legend span').text($(this).val());
                            });

                            if (listContainer.find('.list-element').length){
                                    listContainer.find('.list-element').replaceWith(function(){
                                            return "<input type='text' name='" + $(this).attr('id') + "' value='"+$(this).text()+"' />";
                                    });
                            }

                            var elementList = listContainer.find('ol');
                            elementList.addClass('sortable-list');
                            elementList.find('li').addClass('ui-state-default');
                            elementList.find('li').prepend('<span class="ui-icon ui-icon-grip-dotted-vertical" ></span>');
                            elementList.find('li').prepend('<span class="ui-icon ui-icon-arrowthick-2-n-s" ></span>');
                            elementList.find('li').append('<span class="ui-icon ui-icon-circle-close list-element-deletor" style="cursor:pointer;" ></span>');

                            elementList.sortable({
                                    axis: 'y',
                                    opacity: 0.6,
                                    placeholder: 'ui-state-error',
                                    tolerance: 'pointer',
                                    update: function(event, ui){
                                            var map = {};
                                            $.each($(this).sortable('toArray'), function(index, id){
                                                    map[id] = 'list-element_' + (index + 1);
                                            });
                                            $(this).find('li').each(function(){
                                                    var id = $(this).attr('id');
                                                    if(map[id]){
                                                            $(this).attr('id', map[id]);
                                                            var newName = $(this).find('input').attr('name').replace(id, map[id]);
                                                            $(this).find('input').attr('name', newName);
                                                    }
                                            });
                                    }
                            });

                            var elementSaver = $("<a href='#'><img src='" +  context.base_www + "img/save.png' class='icon' />" + __('Save') + "</a>");
                            elementSaver.click(function(){1
                                    $.postJson(
                                            saveUrl,
                                            $(this).parents('form').serializeArray(),
                                            function(response){
                                                    if(response.saved){
                                                            helpers.createInfoMessage(__("list saved"));
                                                            helpers._load(helpers.getMainContainerSelector(), helpers._url('index', 'Lists', 'tao'));
                                                    }
                                            }
                                    );
                            });
                            elementList.after(elementSaver);

                            elementList.after('<br />');

                            var elementAdder = $("<a href='#'><img src='" +  context.base_www + "img/add.png' class='icon' />" + __('New element') + "</a>");
                            elementAdder.click(function(){
                                    var level = $(this).parent().find('ol').children().length + 1;
                                    $(this).parent().find('ol').append(
                                            "<li id='list-element_"+level+"' class='ui-state-default'>" +
                                                    "<span class='ui-icon ui-icon-arrowthick-2-n-s' ></span>" +
                                                    "<span class='ui-icon ui-icon-grip-dotted-vertical' ></span>" +
                                                    "<input type='text' name='list-element_"+level+"_' />" +
                                                    "<span class='ui-icon ui-icon-circle-close list-element-deletor' ></span>" +
                                            "</li>");
                            });
                            elementList.after(elementAdder);
                    }

                    $(".list-element-deletor").click(function(){
                            if(confirm(__("Please confirm you want to delete this list element."))){
                                    var element = $(this).parent();
                                    uri = element.find('input:text').attr('name').replace(/^list\-element\_([1-9]*)\_/, '');
                                    $.postJson(
                                            delEltUrl,
                                            {uri: uri},
                                            function(response){
                                                    if(response.deleted){
                                                            element.remove();
                                                            helpers.createInfoMessage(__("element deleted"));
                                                    }
                                            }
                                    );
                            }
                    });
            });

            $(".list-deletor").click(function(){
                    if(confirm(__("Please confirm you want to delete this list. This operation is not reversible."))){
                            var list = $(this).parents("div.listbox");
                            var uri = $(this).attr('id').replace('list-deletor_', '');
                            $.postJson(
                                    delListUrl,
                                    {uri: uri},
                                    function(response){
                                            if(response.deleted){
                                                    helpers.createInfoMessage(__("list deleted"));
                                                    list.remove();
                                            }
                                    }
                            );
                    }
            });
        }
    };
});



/**  
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; under version 2
 * of the License (non-upgradable).
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 * 
 * Copyright (c) 2014 (original work) Open Assessment Technologies SA;
 *               
 * 
 */
define('controller/main/toolbar',['jquery'], function($){
    
    
    var $toolbarContainer = $('#main-menu > .right-menu');

    /**
     * The TaoToolbar component bind the data-action attribute to controllers. 
     * 
     * @exports tao/controller/main/toolbar
     */
    var taoToolbar = {
        
        /**
         * Set up the toolbar
         */
        setUp : function(){
            $toolbarContainer.find('[data-action]').click(function(){
                
                var $elt = $(this);
                var action = $elt.data('action');
                require([action], function(controller){
                    if(controller &&  typeof controller.start === 'function'){
                        controller.start();
                    }
                });
            });
        }
    };
    
    return taoToolbar;
});

define('tao/controller/main',['uiBootstrap', 'helpers', 'uiForm', 'generis.actions', 'controller/main/toolbar'], 
    function (UiBootstrap, Helpers, UiForm, GenerisActions, toolbar) {

    return {
        start : function(){
            
            //initialize legacy components
            UiBootstrap.init();
            Helpers.init();
            UiForm.init();
            GenerisActions.init();
            
            //initialize main components
            toolbar.setUp();
        }
    };
});
define('tao/controller/main/actions',['module', 'uiBootstrap'], function(module, uiBootstrap){
    return {
        start : function(){
            
            uiBootstrap.initNav();
        }
    };
});



/**  
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; under version 2
 * of the License (non-upgradable).
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 * 
 * Copyright (c) 2014 (original work) Open Assessment Technologies SA;
 *               
 * 
 */
define('tao/controller/main/toolbar',['jquery'], function($){
    
    
    var $toolbarContainer = $('#main-menu > .right-menu');

    /**
     * The TaoToolbar component bind the data-action attribute to controllers. 
     * 
     * @exports tao/controller/main/toolbar
     */
    var taoToolbar = {
        
        /**
         * Set up the toolbar
         */
        setUp : function(){
            $toolbarContainer.find('[data-action]').click(function(){
                
                var $elt = $(this);
                var action = $elt.data('action');
                require([action], function(controller){
                    if(controller &&  typeof controller.start === 'function'){
                        controller.start();
                    }
                });
            });
        }
    };
    
    return taoToolbar;
});

define('tao/controller/main/trees',['jquery', 'lodash', 'helpers', 'generis.tree.browser', 'generis.actions', 'module'], 
function($, _, helpers, GenerisTreeBrowserClass, generisActions, module){
    return {
        start : function(){
            
            var sectionTreesData = module.config().sectionTreesData;
            if(sectionTreesData){
                for(var treeId in sectionTreesData){
                    var options = _.defaults(sectionTreesData[treeId],{
                        formContainer: helpers.getMainContainerSelector(),
                        actionId: treeId,
                        paginate: 30
                    });
                    var tree = new GenerisTreeBrowserClass('#tree-' + treeId, options.dataUrl, options);
                    generisActions.setMainTree(tree);
                }
            }
        }
    };
});



define('tao/controller/settings/extensionManager',['jquery', 'i18n', 'context', 'helpers'], function($, __, context, helpers){

    var ext_installed = [];
    var toInstall = [];
    var indexCurrentToInstall = -1;
    var percentByExt = 0;
    var installError = 0;

    function getDependencies(extension) {
            var dependencies = [];
            $('#' + extension + ' .dependencies li:not(.installed)').each(function() {
                    var ext = $(this).attr('rel');
                    var deps = getDependencies(ext);
                    deps.push(ext);
                    dependencies = dependencies.concat(deps);
            });
            return dependencies;
    }

    //Give an array with unique values
    function getUnique(orig){
            var a = [];
            for (var i = 0; i < orig.length; i++) {
                    if ($.inArray(orig[i], a) < 0) a.push(orig[i]);
            }
            return a;
    }

    function progressConsole(msg) {
            $('#installProgress .console').append('<p>' + msg + '</p>');
            $('#installProgress .console').prop({scrollTop: $('#installProgress .console').prop("scrollHeight")});
    }

    function installNextExtension() {
            var ext = toInstall[indexCurrentToInstall];
            $('#installProgress p.status').text(__('Installing extension %s...').replace('%s', ext));
            progressConsole(__('Installing extension %s...').replace('%s', ext));
            $.ajax({
                    type: "POST",
                    url: context.root_url + "tao/ExtensionsManager/install",
                    data: 'id='+ext,
                    dataType: 'json',
                    success: function(data) {
                            helpers.loaded();
                            if (data.success) {
                                    progressConsole(__('> Extension %s succesfully installed.').replace('%s', ext));

                                    // state that the extension is install in remaining dependencies.
                                    $('li.ext-id.ext-' + ext).addClass('installed');

                                    $('tr#'+ext).slideUp('normal', function() {
                                            var $tr = $('<tr></tr>').appendTo($('#extensions-manager-container tbody')).hide();
                                            var $orig = $('tr#' + ext + ' td');
                                            $tr.append('<td class="bordered">' + $($orig[0]).text() + '</td>');
                                            $tr.append('<td class="bordered">' + $($orig[1]).text() + '</td>');
                                            $tr.append('<td>' + $($orig[2]).text() + '</td>');
                                            $tr.slideDown('normal', function() {
                                                    $('tr#' + ext).remove();

                                                    // table changed, restyle.
                                                    styleTables();

                                                    // If the available extensions table is empty,
                                                    // just inform the user.
                                                    if ($('#available-extensions-container table tbody tr').length == 0){
                                                            noAvailableExtensions();
                                                    }

                                                    $('#installProgress .bar').animate({width:'+=' + percentByExt + '%'}, 1000, function() {
                                                            //Next
                                                            indexCurrentToInstall++;
                                                            hasNextExtensionToInstall();
                                                    });
                                            });
                                    });
                            } else {
                                    installError = 1;
                                    progressConsole('Installation of ' + ext + ' failed');
                            }
                            helpers.createInfoMessage(data.message);
                    }
            });

            if (installError) {
                    progressConsole(__('A fatal error occured during the installation process.'));
            }
    }

    function hasNextExtensionToInstall() {
            if (indexCurrentToInstall >= toInstall.length) {
                    toInstall = [];
                    $('#installProgress .bar').animate({backgroundColor:'#bb6',width:'100%'}, 1000);
                    progressConsole(__('Generating cache...'));
                    $.ajax({
                            type: "GET",
                            url: $($('#main-menu a')[0]).prop('href'),
                            success: function(data) {
                                    helpers.loaded();
                                    $('#installProgress .bar').animate({backgroundColor:'#6b6'}, 1000);
                                    $('#installProgress p.status').text(__('Installation done.'));
                                    progressConsole(__('> Installation done.'));
                            }
                    });
            } else {
                    installNextExtension();
            }
    }

    function styleTables(){
            // Clean all to make this function able to "restyle" after
            // data refresh.
            $('#Extensions_manager table tr').removeClass('extensionOdd')
                                                                             .removeClass('extensionEven');

            $('#Extensions_manager table tr:nth-child(even)').addClass('extensionEven');
            $('#Extensions_manager table tr:nth-child(odd)').addClass('extensionOdd');
    }

    function noAvailableExtensions(){
            var $noAvailableExtElement = $('<div/>');
            $noAvailableExtElement.attr('id', 'noExtensions')
                                                      .addClass('ui-state-highlight')
                                                      .text(__('No extensions available.'));

            $('#available-extensions-container').empty().append($noAvailableExtElement);
    }
    
    return {
        start : function(){
            
            // Table styling.
            styleTables();

            $('#installProgress').hide();

            //Detect wich extension is already installed
            $('#extensions-manager-container .ext-id').each(function() {
                    var ext = $(this).text();
                    ext_installed.push(ext);
                    $('.ext-id.ext-' + ext).addClass('installed');
            });

            $('#available-extensions-container tr input').click(function(event){
                    event.stopPropagation();
            });

            $('#available-extensions-container tr input:checkbox').click(function() {
                    var $installButton = $('#installButton');
                    if ($(this).parent().parent().parent().find('input:checkbox:checked').length > 0){
                            $installButton.attr('disabled', false);
                    }
                    else{
                            $installButton.attr('disabled', true);
                    }
            });

            $('#available-extensions-container form').submit(function(event) {
                    //Prepare the list of extension to install in the order of dependency
                    toInstall = [];
                    $('#available-extensions-container input:checked').each(function() {
                            var ext = $(this).prop('name').split('_')[1];
                            var deps = getDependencies(ext);
                            if (deps.length) toInstall = toInstall.concat(deps);
                            toInstall.push(ext);
                    });
                    toInstall = getUnique(toInstall);
                    if (toInstall.length == 0) {
                            alert(__('Nothing to install !'));
                            return false;
                    }
                    //Let's go
                    percentByExt = 100 / toInstall.length;

                    //Show the dialog with the result
                    $('#installProgress p.status').text(__('%s extension(s) to install.').replace('%s', toInstall.length));
                    $('#installProgress .bar').width(0);
                    $('#installProgress .console').empty();
                    progressConsole(__('Do you wish to install the following extension(s):\n%s?').replace('%s', toInstall.join(', ')));
                    $('#installProgress').dialog({
                            modal: true,
                            width: 400,
                            height: 300,
                            buttons: [
                                    {
                                            text: __('No'),
                                            click: function() {
                                                    $(this).dialog('close');
                                            }
                                    },
                                    {
                                            text: __('Yes'),
                                            click: function() {
                                                    //Run the install one by one
                                                    progressConsole(__('Preparing installation...'));
                                                    $('.ui-dialog-buttonpane').remove();
                                                    installError = 0;
                                                    indexCurrentToInstall = 0;
                                                    installNextExtension();
                                            }
                                    }
                            ]
                    });
                    event.preventDefault();
            });
        }
    };

});
