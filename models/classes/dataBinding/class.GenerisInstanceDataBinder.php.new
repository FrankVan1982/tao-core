<?php

use oat\generis\model\OntologyRdf;
use oat\oatbox\event\EventManager;
use oat\oatbox\service\ServiceManager;
use oat\tao\model\event\MetadataModified;

/**
 * A data binder focusing on binding a source of data to a generis instance
 *
 * @access public
 * @author Jerome Bogaerts, <jerome@taotesting.com>
 * @package tao
 */
class tao_models_classes_dataBinding_GenerisInstanceDataBinder extends tao_models_classes_dataBinding_AbstractDataBinder
{
    // --- ASSOCIATIONS ---


    // --- ATTRIBUTES ---

    /**
     * A target Resource.
     *
     * @access private
     * @var Resource
     */
    private $targetInstance;

    // --- OPERATIONS ---

    /**
     * Creates a new instance of binder.
     *
     * @access public
     * @author Jerome Bogaerts, <jerome@taotesting.com>
     * @param  Resource $targetInstance
     * @return mixed
     */
    public function __construct(core_kernel_classes_Resource $targetInstance)
    {
        $this->targetInstance = $targetInstance;
    }

    /**
     * Returns the target instance.
     *
     * @access protected
     * @author Jerome Bogaerts, <jerome@taotesting.com>
     * @return core_kernel_classes_Resource
     */
    protected function getTargetInstance()
    {
        return $this->targetInstance;
    }

    /**
     * Simply bind data from the source to a specific generis class instance.
     *
     * The array of the data to be bound must contain keys that are property
     * The respective values can be either scalar or vector (array) values or
     * values.
     *
     * - If the element of the $data array is scalar, it is simply bound using
     * - If the element of the $data array is a vector, the property values are
     *   with the values of the vector.
     *
     * @access public
     * @param array data An array of values where keys are Property URIs and values are either scalar or vector values.
     * @return mixed
     * @throws tao_models_classes_dataBinding_GenerisInstanceDataBindingException
     * @author Jerome Bogaerts, <jerome@taotesting.com>
     */
    public function bind($data)
    {
        $eventManager = $this->getEventManager();
        $instance = $this->getTargetInstance();

        try {
            if (isset($data[OntologyRdf::RDF_TYPE])) {
                foreach ($instance->getTypes() as $type) {
                    $instance->removeType($type);
                }

                $propertyValue = $data[OntologyRdf::RDF_TYPE];
                if (!is_array($propertyValue)) {
                    $types = [$propertyValue];
                    foreach ($types as $type) { // @fixme $types may be undefined
                        $instance->setType(
                            new core_kernel_classes_Class($type)
                        );
                    }
                }

                /*foreach ($types as $type) { // @fixme $types may be undefined
                    $instance->setType(
                        new core_kernel_classes_Class($type)
                    );
                }*/
            }

            foreach ($data as $propertyUri => $propertyValue) {
                // $propertyUri is the key, so this condition can only happen once
                //
                if ($propertyUri == OntologyRdf::RDF_TYPE) {
                    /*foreach ($instance->getTypes() as $type) {
                        $instance->removeType($type);
                    }

                    if (!is_array($propertyValue)) {
                        $types = [$propertyValue];
                    }

                    foreach ($types as $type) { // @fixme $types may be undefined
                        $instance->setType(
                            new core_kernel_classes_Class($type)
                        );
                    }*/

                    continue;
                }

                $prop = new core_kernel_classes_Property($propertyUri);
                $existingValues = $instance->getPropertyValuesCollection($prop);

                if ($existingValues->count() > 0) {
                    if (is_array($propertyValue)) {
                        $instance->removePropertyValues($prop);

                        foreach ($propertyValue as $aPropertyValue) {
                            if (strlen(trim($propertyValue)) > 0) {
                                $instance->setPropertyValue(
                                    $prop,
                                    $aPropertyValue
                                );
                            }
                        }
                    } elseif (is_string($propertyValue)) {
                        // editPropertyValues will do $this->removePropertyValues($property) first,
                        // having no pattern means all values (maybe just for the current lang)
                        // are removed for this property and instance values
                        /*$instance->editPropertyValues(
                            $prop,
                            $propertyValue
                        );*/

                        if (strlen(trim($propertyValue)) == 0) {
                            // Fix for ADF-869 is probably to be done here
                            //
                            // It seems MySQL would remove the value because it silently truncates
                            // strings containing only whitespaces (so the next pattern matches the
                            // value just inserted), while Postgres will keep the whitespace and
                            // the next pattern won't match anything
                            //
                            // If the property value is an empty space (the default value in a select
                            // input field), delete the corresponding triplet (and not all property
                            // values).
                            //$instance->removePropertyValues($prop, ['pattern' => '']);
                            $instance->removePropertyValues($prop);
                        } else {
                            $instance->editPropertyValues(
                                $prop,
                                $propertyValue
                            );
                        }
                    }
                } else {
                    if (is_array($propertyValue)) {
                        foreach ($propertyValue as $aPropertyValue) {
                            $instance->setPropertyValue(
                                $prop,
                                $aPropertyValue
                            );
                        }
                    } elseif (is_string($propertyValue) && strlen(trim($propertyValue)) !== 0) {
                        $instance->setPropertyValue(
                            $prop,
                            $propertyValue
                        );
                    }
                }

                $eventManager->trigger(
                    new MetadataModified($instance, $propertyUri, $propertyValue)
                );
            }

            return $instance;

        } catch (common_Exception $e) {
            throw new tao_models_classes_dataBinding_GenerisInstanceDataBindingException(
                sprintf(
                    "An error occurred while binding property values to instance '%s': %s",
                    $this->getTargetInstance()->getUri(),
                    $e->getMessage()
                )
            );
        }
    }

    private function getEventManager(): EventManager
    {
        return ServiceManager::getServiceManager()->get(EventManager::SERVICE_ID);
    }
}
