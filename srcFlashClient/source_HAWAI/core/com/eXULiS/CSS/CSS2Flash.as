//import mx.controls.*;import lu.tao.utils.Event;import com.eXULiS.lib.defsRepository;import com.eXULiS.lib.Toolbox;//import xpath.*;import com.eXULiS.CSS.*;//import XML2Object;/*** CSS 2 SWF* @author Raynald Jadoul* @description Translates CSS syntax in Flash native components* @usage data = new CSS2Flash().parseXML(anXML);*/class com.eXULiS.CSS.CSS2Flash extends XML {    private var oResult:Object = new Object ();    private var oXML:XML;	private var canvas_mc:MovieClip;	private var cssDefsRepository_obj:defsRepository;/*** * Constructor* * initializes the canvas movie clip*/	function CSS2Flash(target_mc:MovieClip) {		canvas_mc = target_mc;//		trace("CSS2Flash: canvas initialized to " + canvas_mc + " (base was " + target_mc + "[" + target_mc._name + "])");		cssDefsRepository_obj = new defsRepository();		canvas_mc._exulis._cssDefsRepository = cssDefsRepository_obj;	}	public function destroy(){		for(var vCpt=0;vCpt < canvas_mc._css._cssDescendants.length;vCpt++){			canvas_mc._css._cssDescendants[vCpt].destroy();		}		canvas_mc.removeMovieClip();	}/*** @method get xml* @description return the xml passed in the parseXML method* @usage theXML = CSS2Flash.xml*/    public function get xml():XML{        return oXML    }// here we connect the canvas to the CSS construction// here CSSsomething    private function css_something(node:XML,current_mc){//		trace("CSS2Flash: CSS something (" + node.attributes["id"] + ") triggered on " + current_mc._css.id + " on depth: " + current_mc._childNextDepth);//		var object_obj = new CSSsomething(current_mc,node);		var local_mc;//		local_mc = object_obj.create();		return local_mc;    }/*** @method translateXML* @description core of the CSS2Flash class*/    public function translateXML(node:XML, current_mc) {		var local_mc:MovieClip;// GUI factory begins here		switch (node.nodeName){			case "something":				local_mc = css_something(node,current_mc);				break;// elements not yet implemented/*			case "symbol":				local_mc = xul_symbol(node,current_mc);				break;			case "use":				local_mc = css_use(node,current_mc);				break;*/// here unhandled tags			default:				trace("CSS2Flash: CSS tag undefined: " + node.nodeName);				local_mc = current_mc;		}		return local_mc;	}}