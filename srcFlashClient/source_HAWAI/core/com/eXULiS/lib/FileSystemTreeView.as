import mx.controls.Tree;import com.xfactorstudio.xml.xpath.*;import com.eXULiS.lib.*;class com.eXULiS.lib.FileSystemTreeView {			private var folderIco_mc:MovieClip;	private var fileIco_mc:MovieClip;	private var usbKeyIco_mc:MovieClip;	private var driveIco_mc:MovieClip;		private var depth_nbr:Number;		private var xCoord_nbr:Number;	private var startX_nbr:Number;	private var yCoord_nbr:Number;	private var startY_nbr:Number;	private var clipRef_mc:MovieClip;		private var container_mc:MovieClip;	private var backGround_mc:MovieClip;		private var xulWindow_mc:MovieClip;		private var yOffset_nbr:Number=0;		private var firstOpenFolder:XMLNode;		private var nodeState_ar:Array;		private var toolbox:Toolbox;		public var myTree;		public function FileSystemTreeView(fileSystView_mc)	{		trace("CONSTRUCTOR [FileSystemTreeView] tree");		this.xulWindow_mc=fileSystView_mc;				depth_nbr=2;		toolbox=new Toolbox();		nodeState_ar=new Array();		init();	}		private function init():Void	{		startX_nbr=5;		startY_nbr=-20;		xCoord_nbr=startX_nbr;		yCoord_nbr=0;		yCoord_nbr=startY_nbr;		clipRef_mc=xulWindow_mc;		clipRef_mc.depth_nbr=0;		container_mc._y=yOffset_nbr;			}		public function getNodeState():Array	{	var a=0;	emptyArray(nodeState_ar);		while(xulWindow_mc.myTree.getNodeDisplayedAt(a))		{			trace("mySTATE ok");			var _nodeIndex=xulWindow_mc.myTree.getNodeDisplayedAt(a);			var _testedNode=xulWindow_mc.myTree.getIsOpen(_nodeIndex);				if (_testedNode)				{				nodeState_ar.push(_nodeIndex);				}			a++					}		return nodeState_ar;	}		public function setNodeState()	{		trace("mySTATE setNodeState");				for (var i in nodeState_ar)		{			xulWindow_mc.myTree.setIsOpen(nodeState_ar[i][0],nodeState_ar[i][1]);		}	}			public function setRef(fileSystView_mc:MovieClip)	{		this.xulWindow_mc=fileSystView_mc;	}		public function getRef():MovieClip	{		return xulWindow_mc;	}			public function getIdPathRef():String	{		return xulWindow_mc.id;	}		// embed current id in window for moving object	public function setIdPathRef(id_str:String):Void	{		xulWindow_mc.id=id_str;	}		public function displayTree(xml_str, startPath_str)	{					trace("startPath_str //> "+startPath_str);		if (!myTree)		{		myTree=xulWindow_mc.createClassObject(Tree, "myTree", clipRef_mc.depth_nbr);		xulWindow_mc.myTree.move(0,yOffset_nbr);				clipRef_mc.depth_nbr++;		updateBackGroundSize();			}			refreshTree(xml_str, startPath_str);		return xulWindow_mc.myTree;	}		public function openBranch(node)	{				xulWindow_mc.myTree.setIsOpen(node);			}			private function unfold(anXml):Void	{		var _myFolder:Array = XPath.selectNodes(anXml, "//item[@unfold='true']");		//var _myFolderClosed:Array = XPath.selectNodes(anXml, "//item[@unfold='false']");						for (var j in _myFolder)		{			xulWindow_mc.myTree.setIsOpen(_myFolder[j],true);		}					}		public function refreshTree(xml_str:String, startPath_str)	{					var _zexml_xml = new XML(xml_str);				_zexml_xml.firstChild.attributes.label = xulWindow_mc._exulis.toolbox.wrapRun(_zexml_xml.firstChild.attributes.label, xulWindow_mc._exulis._guiSource, "SingleNode", "String");				xml_str = String(_zexml_xml.firstChild);								var provider_str=(String(xulWindow_mc.myTree.dataProvider)=="undefined") ? xml_str:String(xulWindow_mc.myTree.dataProvider);								var _xml_str:String=String(xml_str);		var nextXLFref_num:Number;		var stickerEnd_num:Number;		var toInsertText_str:String = "";		var indicator_str:String = "";		var stickerText_str:String = "";								/*nextXLFref_num = _xml_str.indexOf("xlf://");				while(nextXLFref_num != -1){			indicator_str = _xml_str.substr(nextXLFref_num - 1,1);															if(indicator_str == ">"){				stickerEnd_num = _xml_str.indexOf("<",nextXLFref_num + 1);				stickerText_str = _xml_str.substring(nextXLFref_num,stickerEnd_num);				toInsertText_str = toolbox.wrapRun(stickerText_str);					_xml_str = _xml_str.substr(0,nextXLFref_num) + "<![CDATA[" + toInsertText_str + "]]>" + _xml_str.substr(stickerEnd_num);			}			else{				stickerEnd_num = _xml_str.indexOf(indicator_str,nextXLFref_num + 1);				stickerText_str = _xml_str.substring(nextXLFref_num,stickerEnd_num);				toInsertText_str = toolbox.wrapRun(stickerText_str);						_xml_str = _xml_str.substr(0,nextXLFref_num) + toInsertText_str + _xml_str.substr(stickerEnd_num);					}			nextXLFref_num = _xml_str.indexOf("xlf://",nextXLFref_num);		}*/										var infos_xml:XML = new XML(_xml_str);				var _labelToText_ar = XPath.selectNodes(infos_xml, "//item[@label]");				for (var _toTradNode in _labelToText_ar) {					_labelToText_ar[_toTradNode].attributes.label=xulWindow_mc._exulis.toolbox.wrapRun(_labelToText_ar[_toTradNode].attributes.label, xulWindow_mc._exulis._guiSource, "SingleNode", "String");					}					xulWindow_mc.myTree.dataProvider = infos_xml;				if (infos_xml.firstChild.attributes.vhide=="true")		{			xulWindow_mc.myTree.vScrollPolicy="off";		}				if (infos_xml.firstChild.attributes.borderhide=="true")		{			xulWindow_mc.myTree.setStyle("borderStyle","none");		}				unfold(infos_xml);				// open root branch		if (infos_xml.firstChild.attributes.unfold!="false")		{		xulWindow_mc.myTree.setIsOpen(xulWindow_mc.myTree.getTreeNodeAt(0), true);		}				// if startPath is set, open defined branch		if (startPath_str)		{			var _node:Array = XPath.selectNodes(infos_xml, "//item[@id='"+startPath_str+"']");		var _ancestor_ar:Array=XPathAxes.ancestorOrSelf(_node[0]);						for (var a in _ancestor_ar)			{						xulWindow_mc.myTree.setIsOpen(_ancestor_ar[a], true);			}								xulWindow_mc.myTree.setPropertiesAt(xulWindow_mc.myTree.getDisplayIndex(_node[0]),{backgroundColor:0xeeeeee});			firstOpenFolder=_node[0];		}  				xulWindow_mc.myTree.setStyle("defaultLeafIcon", "folder");	}		public function updateBackGroundSize():Void	{		trace("[FileSystemView] updateBackGroundSize: xulWindow_mc._exulis.width = " + xulWindow_mc._exulis.width);		xulWindow_mc.myTree.setSize(xulWindow_mc._exulis.width, xulWindow_mc._exulis.height-yOffset_nbr);	}		public function clearHighlight()	{		xulWindow_mc.myTree.setPropertiesAt(xulWindow_mc.myTree.getDisplayIndex(firstOpenFolder),{backgroundColor:0xffffff});	}		private function emptyArray(zeAr)	{		while(zeAr.length>0)		{			zeAr.shift();		}	}			}