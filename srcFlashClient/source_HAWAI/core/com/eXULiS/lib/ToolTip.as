import mx.transitions.Tween;//import mx.transitions.easing.*;import net.tekool.utils.Relegate;import com.eXULiS.core.XML2Flash;import flash.filters.GlowFilter;import com.eXULiS.lib.*;class com.eXULiS.lib.ToolTip  {	private var currentButton_mc:MovieClip;	private var textToDisplay_str:String;		private var toolTipContener_mc:MovieClip;		private var zeTextField_tf:TextField;		private var depth_nbr:Number;		private var applicationRoot_mc:MovieClip;		private var timer_nbr:Number;		private var alphaTween:Tween;		private var xTween:Tween;	private var yTween:Tween;		private var svgPath_str:String;		private var textFieldWidth_nbr;		private var textFieldHeight_nbr;	private var renderSVG:com.eXULiS.core.XML2Flash;		private var toolbox:Toolbox;		public function ToolTip(textToDisplay_str:String,zeButton_mc:MovieClip)	{		trace("[ToolTip]");				this.textToDisplay_str=textToDisplay_str;		this.currentButton_mc=zeButton_mc;				if (_root._exulis._base_mc)		{		depth_nbr=_root._exulis._base_mc._childNextDepth;				applicationRoot_mc=_root._exulis._base_mc;		} else		{			_root.depth=666;			depth_nbr=_root.depth;			applicationRoot_mc=_root;		}				//svgPath_str='<svg:path id="help_hint_box" xmlns:svg="http://www.w3.org/2000/svg" xmlns="http://www.w3.org/2000/svg" d="M [100+W],[15+H] C [100+W],[19+H] [96+W],[22+H] [89+W],[25+H] L [100+W],[30+H] L [86+W],[26+H] C [86+W],[26+H] [85+W],[26+H] [82+W],[27+H] C [74+W],[29+H] [62+W],[30+H] [50+W],[30+H] L 50,[30+H] C 22,[30+H] 0,[23+H] 0,[15+H] L 0,15 C 0,7 22,0 50,0 L [50+W],0 C [78+W],0 [100+W],7 [100+W],15 L [100+W],[15+H] z" style="fill:#ffff00;fill-rule:evenodd;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1" />';				//svgPath_str='<svg:path id="help_hint_box" xmlns:svg="http://www.w3.org/2000/svg" xmlns="http://www.w3.org/2000/svg" d="M [100+W],[15+H] L [100+W],[30+H] L [86+W],[26+H] C [86+W],[26+H] [85+W],[26+H] [82+W],[27+H] C [74+W],[29+H] [62+W],[30+H] [50+W],[30+H] L 50,[30+H] C 22,[30+H] 0,[23+H] 0,[15+H] L 0,15 C 0,7 22,0 50,0 L [50+W],0 C [78+W],0 [100+W],7 [100+W],15 L [100+W],[15+H] z" style="fill:#ffff00;fill-rule:evenodd;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1" />';				svgPath_str='<svg:path id="help_hint_box" xmlns:svg="http://www.w3.org/2000/svg" xmlns="http://www.w3.org/2000/svg" d="M 0,0 L [7+W],0 L [7+W],[2+H] L 0,[2+H]  L 0,0  z" style="fill:#c1f2fc;fill-rule:evenodd;stroke:#666666;stroke-width:1px;" />';				toolbox=new Toolbox();				init();	}			private function init()	{		trace("[createToolTip] > [init]");				timerDisplay();				//trace("---> "+svgPath_str);	}		private function createTextField():Void	{		//trace("myTip tfield ");		zeTextField_tf=toolTipContener_mc.createTextField("tField", 2,0,0,20,0);		zeTextField_tf.autoSize="Left";		zeTextField_tf.border=false;		zeTextField_tf.fontStyle="italic";		zeTextField_tf.html=true;		zeTextField_tf.wordWrap=false;		zeTextField_tf.multiline=true;								zeTextField_tf.htmlText="<font face='Arial' color='#333333' size='11'><i>"+toolbox.wrapRun(textToDisplay_str)+"</i></font>";				   								textFieldWidth_nbr=zeTextField_tf._width;		textFieldHeight_nbr=zeTextField_tf._height;				trace("myTip "+textToDisplay_str);				//zeTextField_tf.removeTextField();	}		/*private function createShapeContener():Void	{		zeTextField_tf=toolTipContener_mc.createTextField("tField", 2,0,0,20,0);		zeTextField_tf.autoSize="Left";Interval				zeTextField_tf.border=true;		zeTextField_tf.html=true;		zeTextField_tf.wordWrap=false;		zeTextField_tf.multiline=true;				zeTextField_tf.htmlText=textToDisplay_str;	}*/			private function centerTextField()	{		zeTextField_tf._y=(toolTipContener_mc._height-zeTextField_tf._height)/2;		zeTextField_tf._x=(toolTipContener_mc._width-zeTextField_tf._width)/2;	}		private function createToolTipContener()	{		trace("[createToolTip] > [createToolTipContener]");		clearInterval(timer_nbr);						toolTipContener_mc=applicationRoot_mc.createEmptyMovieClip("myToolTip"+depth_nbr,depth_nbr);		//toolTipContener_mc._xscale=-toolTipContener_mc._xscale;				toolTipContener_mc._alpha=0;		depth_nbr++;		// add glow filter		var glow:GlowFilter = new GlowFilter(0x0000, 0.6, 2, 2, 2, 3);		toolTipContener_mc.filters = [glow];			}	private function createToolTip():Void	{		trace("[createToolTip] > [createToolTip]");		createToolTipContener();		createTextField();		addValueToSVGPath();		var renderedSVG:Object;		var tooltip_xml:XML;		renderSVG = new XML2Flash(toolTipContener_mc, "_level0");		tooltip_xml = new XML(addValueToSVGPath());		renderedSVG = renderSVG.parseXML(tooltip_xml);		centerTextField();						// toolTipCoord						alphaTween = new Tween(toolTipContener_mc,"_alpha",null,0,100,10);		alphaTween.onMotionFinished=Relegate.create(this,afterTween);				var targetX_nbr:Number;		var targetY_nbr:Number;						// X coords				if (_xmouse+toolTipContener_mc._width+7>720)		{			targetX_nbr=_xmouse-toolTipContener_mc._width-7;		} else			{				targetX_nbr=_xmouse+7;			}				// Y coords				if ((_ymouse+toolTipContener_mc._height+7)>620)		{			targetY_nbr=(_ymouse-toolTipContener_mc._height-2);			trace("myWidth cas 1");		} else			{				trace("myWidth cas 2");				targetY_nbr=_ymouse+7;			}				if (_ymouse<30)		{			trace("myWidth cas 3");			targetY_nbr=_ymouse+7;		}					//trace("myWidth "+" > "+_ymouse+" > "+toolTipContener_mc._height)					toolTipContener_mc._x=targetX_nbr;		toolTipContener_mc._y=targetY_nbr;		//xTween = new Tween(toolTipContener_mc,"_x",Strong.easeOut,_xmouse+100,targetX_nbr+20,5);		//yTween = new Tween(toolTipContener_mc,"_y",Strong.easeOut,_ymouse-15,_ymouse,5);		//trace(addValueToSVGPath());		//addArrow();			}		private function addArrow()	{		toolTipContener_mc.createEmptyMovieClip("zebec",10);				toolTipContener_mc.onEnterFrame=Relegate.create(this,drawArrow);	}		private function drawArrow()	{		toolTipContener_mc.clear();		toolTipContener_mc.beginFill(0xc1f2fc,100);		toolTipContener_mc.moveTo(15,15);		toolTipContener_mc.lineTo(_xmouse-toolTipContener_mc._x,_ymouse-toolTipContener_mc._y);		toolTipContener_mc.lineTo(40,20);		toolTipContener_mc.endFill();	}			private function addValueToSVGPath():String	{		// search W and replace by tField Width		svgPath_str=searchAndReplace(svgPath_str, "W", String(textFieldWidth_nbr));				// search W and replace by tField Height		svgPath_str=searchAndReplace(svgPath_str, "H", String(textFieldHeight_nbr));				return evalValueIntoPath();			}		private function evalValueIntoPath():String	{		while(svgPath_str.indexOf("[")!=-1 && svgPath_str.indexOf("]")!=-1)		{			var _extract_str:String=extractString(svgPath_str,"[","]",0,false);			var _evalValue_ar=_extract_str.split("+");			var _evalValue_nbr=Number(_evalValue_ar[0])+Number(_evalValue_ar[1]);			var _string_str:String="["+_extract_str+"]";					svgPath_str=searchAndReplace(svgPath_str, _string_str, _evalValue_nbr);		}				return svgPath_str;	}		private function extractString(vInitial,vTarget1,vTarget2,vOffset,vWith)	{// TODO problem with simple quote and indexOf in extractString -> urlencode maybe the solution// TODO add two arguments to process lastindex on vTarget1 and vTarget2		var workString = new String(vInitial);		var finalResult = new String();		var workIndex1;		var workIndex2;		workIndex1 = workString.indexOf(vTarget1);		if(workIndex1 == -1){			workIndex1 = 0;		}		else {			workIndex1 = workIndex1+ vTarget1.length;		}		if (vTarget2 == ""){			workIndex2 = workString.length;		}		else {			workIndex2 = workString.indexOf(vTarget2,workIndex1 + vOffset);			if(workIndex2 == -1){				workIndex2 = workString.length;			}		}		if(vWith == true){			finalResult = vTarget1 + workString.slice(workIndex1,workIndex2) + vTarget2;		}		else {			finalResult = workString.slice(workIndex1,workIndex2);		}		return(finalResult);	}		private function afterTween():Void	{							}		private function timerDisplay():Void	{		timer_nbr=setInterval(this,"createToolTip",1000);			}		public function removeToolTip():Void	{		//delete toolTipContener_mc.onEnterFrame;		trace("myTip out"+toolTipContener_mc);		clearInterval(timer_nbr);		yTween.stop();		xTween.stop();		alphaTween.stop();		toolTipContener_mc.removeMovieClip();			}		function searchAndReplace(zeTexte_str, search_str:String, replacement_str:String):String	{		return zeTexte_str.split(search_str).join(replacement_str);	}						}