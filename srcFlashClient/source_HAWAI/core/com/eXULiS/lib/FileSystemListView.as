import mx.controls.DataGrid;import mx.controls.gridclasses.DataGridColumn;import com.eXULiS.lib.*;class com.eXULiS.lib.FileSystemListView {		private var folderIco_mc:MovieClip;	private var fileIco_mc:MovieClip;	private var usbKeyIco_mc:MovieClip;	private var driveIco_mc:MovieClip;	private var depth_nbr:Number;	private var xCoord_nbr:Number;	private var startX_nbr:Number;	private var yCoord_nbr:Number;	private var startY_nbr:Number;	private var clipRef_mc:MovieClip;		private var container_mc:MovieClip;	private var backGround_mc:MovieClip;		private var xulWindow_mc:MovieClip;		private var yOffset_nbr:Number=0;		private var infosColumn_str:String;		private var columnInfos_ar:Array;	private var colLabelIndice_nbr:Number;	private var evalWidth_tf:TextField;	private var maxLength_nbr:Number;	private var colInfos_ar:Array;	private var toolbox:Toolbox;	public var myList;	private var currentHighlightCount:Number;		public function FileSystemListView(fileSystView_mc)	{		trace("CONSTRUCTOR [FileSystemView] list");		this.xulWindow_mc = fileSystView_mc;				depth_nbr=25;				toolbox=new Toolbox();		init();	}		private function init():Void	{		startX_nbr=5;		startY_nbr=15;		xCoord_nbr=startX_nbr;		yCoord_nbr=0;		yCoord_nbr=startY_nbr;		clipRef_mc=xulWindow_mc;		clipRef_mc.depth_nbr=25;				createViewContainer();		container_mc._y=yOffset_nbr;		colInfos_ar=new Array;		}		public function displayList(infos_str:String)	{		infosColumn_str=infos_str;		// to process max label subject length		evalWidth_tf=_root.createTextField("evalMc",69996,-5000,300,0,30);		evalWidth_tf.autoSize=true;		evalWidth_tf.wordWrap=false;		evalWidth_tf.border=true;		evalWidth_tf.html=true;										// end		if (!xulWindow_mc.myGrid)		{			myList=xulWindow_mc.createClassObject(DataGrid, "myGrid", clipRef_mc.depth_nbr);			clipRef_mc.depth_nbr++;			xulWindow_mc.myGrid.move(0,yOffset_nbr);						xulWindow_mc.myGrid.setStyle("fontFamily","Verdana");			xulWindow_mc.myGrid.setStyle("fontSize",12);			xulWindow_mc.myGrid.setSize(100, 50);			createColumns(infosColumn_str);		}		useNumericSort([0,1,2,3,4,5], xulWindow_mc.myGrid);		updateBackGroundSize();				//refreshTree(xml_str);		return xulWindow_mc.myGrid;	}		private function useNumericSort(columns:Array, dg:DataGrid) {	   dg.addEventListener("headerRelease",	      function (evt:Object) {	         var dataGrid = evt.target;	         var data = dataGrid.dataProvider;	         var column = evt.columnIndex;	         var columnName = dataGrid.columnNames[column];	         var direction = evt.target.sortDirection.toUpperCase();	         var sortOptions = 0;	         var useNumeric:Boolean = false;	         for (var index in columns) {	            if (columns[index] == column) {	              useNumeric = true;	              break;	            }	         }	         if (useNumeric) {	            data.sort(function(recordA, recordB) {	               var a:Number = Number(recordA[columnName]);	               var b:Number = Number(recordB[columnName]);	               if (isNaN(a)) { a = 0; }	               if (isNaN(b)) { b = 0; }	               return (direction == 'DESC') ? (b-a) : (a-b);	            }, sortOptions);	         } else {	            sortOptions |= (direction == 'DESC') ? 2 : 0;	            sortOptions |= 1; // case-insentitive	            data.sortOn(columnName, sortOptions);	         }	      });	}			public function createColumns(attributesInfos_str)	{		eraseColumns();		emptyArray(columnInfos_ar);		emptyArray(colInfos_ar);		columnInfos_ar=attributesInfos_str.split(";");				// search max width subject		for (var j=0;j<columnInfos_ar.length;j++)		{											var _infosColumn_ar:Array=columnInfos_ar[j].split("::");			var _myCol:DataGridColumn = new DataGridColumn(_infosColumn_ar[0]);			_myCol.cellRenderer = "ShadowCellRenderer";			_myCol["htmlFunction"] = amazonHtmlFunction;			_myCol.headerText = xulWindow_mc._exulis.toolbox.wrapRun(_infosColumn_ar[1],xulWindow_mc._exulis._guiSource,"SingleNode","String");			;			var _localInfos_ar:Array=new Array();			_localInfos_ar[0]=_infosColumn_ar[0];			_localInfos_ar[1]=_infosColumn_ar[1];						colInfos_ar.push(_localInfos_ar);						_myCol.width=xulWindow_mc._exulis.width/columnInfos_ar.length;			xulWindow_mc.myGrid.addColumn(_myCol);						// store attributes "label" column indice			if (_infosColumn_ar[0]=="label")			{				colLabelIndice_nbr=j;								var _myTitle=xulWindow_mc._exulis.toolbox.wrapRun(_infosColumn_ar[1],xulWindow_mc._exulis._guiSource,"SingleNode","String");								// begin by process header size and store result								maxLength_nbr=0;								evalWidth_tf.htmlText="<font face='Verdana' size='12'>"+_myTitle+"</font>";												trace("myHEADERSIZE maxLength_nbr : "+maxLength_nbr);								if (maxLength_nbr<evalWidth_tf._width)				{					maxLength_nbr=evalWidth_tf._width+5;				}			}					}		// Force to redraw the component		var item_obj:Object = {};		xulWindow_mc.myGrid.addItem(item_obj);		// Erase fake info		eraseInfos();	}	public function sortList(column,methode)	{		var _methode= (methode=="ASC") ? Array.ASCENDING : Array.DESCENDING;		xulWindow_mc.myGrid.sortItemsBy(column, _methode | Array.NUMERIC);	}	public function getColInfos():Array	{		return colInfos_ar;	}	private function eraseColumns()	{		xulWindow_mc.myGrid.removeAllColumns();			}	public function addInfos(currentNode_xml:XML,currentId_str:String):Void	{		var item_obj:Object=new Object();			item_obj.id=currentId_str;				for (var k=0;k<columnInfos_ar.length;k++)		{			var _zeInfos_ar:Array=columnInfos_ar[k].split(":");			var _myValue=xulWindow_mc._exulis.toolbox.wrapRun(currentNode_xml.attributes[_zeInfos_ar[0]],xulWindow_mc._exulis._guiSource,"SingleNode","String");							_myValue=(_myValue==undefined) ? "" : _myValue;								if (!isNaN(Number(_myValue)))				{				item_obj[_zeInfos_ar[0]]=Number(_myValue);				} else					{						item_obj[_zeInfos_ar[0]]=_myValue;					}								if (currentNode_xml.attributes[_zeInfos_ar[0]+"displayed"])			{				//var _myDisplayedValue=currentNode_xml.attributes[_zeInfos_ar[0]+"displayed"];				var _myDisplayedValue=xulWindow_mc._exulis.toolbox.wrapRun(currentNode_xml.attributes[_zeInfos_ar[0]+"displayed"],xulWindow_mc._exulis._guiSource,"SingleNode","String");									item_obj[_zeInfos_ar[0]+"displayed"]=_myDisplayedValue;			}			// calcul la largeur de la colonne si l'attribut est "label" 						if (_zeInfos_ar[0]=="label")			{						//evalWidth_tf.htmlText="<font face='Verdana' size='12'>"+toolbox.wrapRun(currentNode_xml.attributes[_zeInfos_ar[0]])+"</font>";			evalWidth_tf.htmlText="<font face='Verdana' size='12'>"+xulWindow_mc._exulis.toolbox.wrapRun(currentNode_xml.attributes[_zeInfos_ar[0]],xulWindow_mc._exulis._guiSource,"SingleNode","String");+"</font>";						trace("myHEADERSIZE ");			trace("myHEADERSIZE data sentence : "+toolbox.wrapRun(currentNode_xml.attributes[_zeInfos_ar[0]]));			trace("myHEADERSIZE data evalWidth_tf._width : "+evalWidth_tf._width);			trace("myHEADERSIZE data maxLength_nbr : "+maxLength_nbr);						if (maxLength_nbr<evalWidth_tf._width)				{					maxLength_nbr=evalWidth_tf._width+5;					//xulWindow_mc.myGrid.getColumnAt(colLabelIndice_nbr).width=maxLength_nbr+5;				}							}						trace("myHEADERSIZE data after : "+maxLength_nbr);			trace("myHEADERSIZE ");			xulWindow_mc.myGrid.getColumnAt(colLabelIndice_nbr).width=maxLength_nbr;						//evalWidth_tf.removeTextField();		}													xulWindow_mc.myGrid.addItem(item_obj);			}				public function highlightItem(count)	{		currentHighlightCount=count;		xulWindow_mc.myGrid.setPropertiesAt(count,{backgroundColor:0xeeeeee});	}		public function clearhighlightItem()	{		trace("GGG clearhighlightItem : "+currentHighlightCount);		xulWindow_mc.myGrid.setPropertiesAt(currentHighlightCount,{backgroundColor:0xffffff});	}		public function eraseInfos():Void	{		xulWindow_mc.myGrid.removeAll();	}		public function setRef(fileSystView_mc:MovieClip)	{		this.xulWindow_mc=fileSystView_mc;	}		public function getRef():MovieClip	{		return xulWindow_mc;	}			public function getIdPathRef():String	{		return xulWindow_mc.id;	}		// embed current id in window for moving object	public function setIdPathRef(id_str:String):Void	{		xulWindow_mc.id=id_str;	}			private function createViewContainer():Void	{		container_mc=clipRef_mc.createEmptyMovieClip("view"+clipRef_mc.depth_nbr,clipRef_mc.depth_nbr);		clipRef_mc.depth_nbr++;		createBackGround();	}		private function createBackGround():Void	{		backGround_mc=container_mc.createEmptyMovieClip("backG",1);		backGround_mc.beginFill(0xff0000,0);		backGround_mc.moveTo(0,0);		backGround_mc.lineTo(50,0);		backGround_mc.lineTo(50,50);		backGround_mc.lineTo(0,50);		backGround_mc.lineTo(0,0);		backGround_mc.endFill();		updateBackGroundSize();	}		public function updateBackGroundSize():Void	{		trace("[FileSystemView] updateBackGroundSize: xulWindow_mc._exulis.width = " + xulWindow_mc._exulis.width);		xulWindow_mc.myGrid.setSize(xulWindow_mc._exulis.width, xulWindow_mc._exulis.height-yOffset_nbr);	}			public function resetPosition():Void	{		xCoord_nbr=startX_nbr;		yCoord_nbr=startY_nbr;	}		private function emptyArray(array){		while (array.length>0)		{			array.pop();		}	}	private function amazonHtmlFunction(itemObj:Object, columnName:String) {	if (itemObj == undefined || columnName == undefined) {		// trace(" Philippe , a bug !!!");		return;	}	switch (columnName) {	case "id" :				var html;		html = "<p class='colNums' align='right'>"+itemObj.id+"</p>";		return html;		break;		case columnName :				var html;		html = "<p class='colDatas' align='left'>"+itemObj[columnName]+"</p>";		return html;		break;	default:		var html;		html = "<p class='colNum' align='right'>"+itemObj+"</p>";		return html;	break;	}};		}