import net.tekool.utils.Relegate;import com.eXULiS.lib.*;// TODO: double click implementationclass com.eXULiS.lib.FileSystem {		public var fileSystModel:FileSystemModel;	private var fileSystView:FileSystemView;	private var fileSystDisplayer:FileSystemViewer;	private var fileSystHeader:FileSystemHeader;	public var fileSystTreeView:FileSystemTreeView;	public var fileSystListView:FileSystemListView;	public var fileSystSortView:FileSystemSortView;	// store current ico	private var currentIco_ar:Array;		private var currentNode_xml:XML;	private var currentXMLState_xml:XML;	private var startPath_str:String;	public var currentPath_str:String;		public var viewMode_str:String;		private var currentStyle_str:String;		public var currentMailId_str:String;	public var currentFolderId_str:String;		// xul windows contener	private var refWindow_mc:MovieClip;		private var myButton_ar;			private var listeners_ar:Array;		public function FileSystem(fileSystModel:FileSystemModel,startPath_str:String,refWindow_mc:MovieClip,viewType_str:String, style_str:String)	{		trace("CONSTRUCTOR [FileSystem] refWindow_mc = " + refWindow_mc);						this.currentStyle_str=style_str;				this.fileSystModel=fileSystModel;		this.refWindow_mc=refWindow_mc;								this.startPath_str = (startPath_str == undefined) ? "desktop" : startPath_str;				trace("startPath " + startPath_str);				this.currentMailId_str=this.startPath_str;						viewMode_str=viewType_str;		fileSystModel.addController(this);												initArrays();		if (this.fileSystModel.getXMLState())		{			init();					}			}		private function initArrays():Void	{		listeners_ar=new Array();	}		public function addlisteners(listeners):Boolean	{		// test if controller is not already in		for (var i in listeners_ar)		{			if (listeners_ar[i]==listeners)			{				trace("[FileSystemModel] > [addController] this controller already in");				return false;			}		}				listeners_ar.push(listeners);	}			public function listenersNotify(size_nbr):Void	{		for (var a in listeners_ar)		{			listeners_ar[a].updateScroll();		}	}				private function deletelisteners(listeners):Void	{		for (var a=0;a<listeners_ar.length;a++)		{			if (listeners_ar[a]==listeners)			{				listeners_ar.splice(a,1);			}		}	}				private function init():Void	{		trace("[FileSystem] viewMode_str = " + viewMode_str);		// toolbox		// startPath				var _testType=new XML(fileSystModel.getPartialTree(startPath_str));							if (_testType.firstChild.attributes.type!="file")		{						var _path_xml= new XML(fileSystModel.getPartialTree(startPath_str));			_path_xml.ignoreWhitespace=true;			var _path_str = _path_xml.firstChild.attributes.id;		} else			{		var _path_xml= new XML(fileSystModel.getParent(startPath_str));		_path_xml.ignoreWhitespace=true;		var _path_str = _path_xml.firstChild.attributes.id;			}						switch (viewMode_str){			case "head":			{								fileSystHeader=new FileSystemHeader(refWindow_mc,this);				// begin by first mail by default				updateCurrentTree(startPath_str);				// end				break;							} 			case "view":			{				fileSystDisplayer=new FileSystemViewer(refWindow_mc,this);								if (startPath_str)				{				// begin by first mail by default					var _content=(fileSystModel.readDocumentContent(startPath_str)==undefined) ? "" : fileSystModel.readDocumentContent(startPath_str)				// end								var _content="";					if (currentStyle_str)				{					fileSystDisplayer.setStyle(currentStyle_str);				}								fileSystDisplayer.displayContent(_content);				}				// begin by first mail by default				updateCurrentTree(startPath_str);				// end				break;			}						case "list":			{				fileSystListView = new FileSystemListView(refWindow_mc);				// begin by first mail by default				fileSystListView.highlightItem(startPath_str);				// end								var _testType=new XML(fileSystModel.getPartialTree(startPath_str));								if (_testType.firstChild.attributes.type!="file")				{				var _path_xml= new XML(fileSystModel.getParent(startPath_str));				_path_xml.ignoreWhitespace=true;				} else				{					var _path_xml= new XML(fileSystModel.getPartialTree(startPath_str));					_path_xml.ignoreWhitespace=true;				}															    currentMailId_str=_path_str;								var _list = updateCurrentTree(_path_str);				_list.addEventListener('change', this);				_list.addEventListener('itemRollOver', this); 				break;			}			case "tree":			{				fileSystTreeView=new FileSystemTreeView(refWindow_mc);				var _tree=updateCurrentTree(_path_str);				var _temp=fileSystTreeView.getNodeState();				_tree.addEventListener('change', this);				_tree.addEventListener('nodeOpen', this);				_tree.addEventListener('nodeClose', this);				break;			}			case "sort":			{				fileSystSortView=new FileSystemSortView(refWindow_mc);				updateCurrentTree();				break;			}			default:			{				fileSystView=new FileSystemView(refWindow_mc);				// store id of current state for move action				fileSystView.setIdPathRef(startPath_str);					currentIco_ar=new Array();				this.currentPath_str=startPath_str;				updateCurrentTree(startPath_str);			}		}	}		function nodeOpen(evt)	{		fileSystModel.setAttributes(evt.node.attributes.id,"unfold","true");				var event_str:String = "FOLDER_FOLDED";		var payload_str:String = "id"+_root.FEEDTRACE_PAYLOAD_ATTRIBUTE_NAME_VALUE_SEPARATOR+evt.node.attributes.id;		trace("feedTrace for " + event_str + ", Stimulus " + payload_str);		_level0.currentItemRootLevel.feedTrace(event_str,payload_str,"stimulus"); // FOLDER_FOLDED	}		function nodeClose(evt)	{		fileSystModel.setAttributes(evt.node.attributes.id,"unfold","false");				var event_str:String = "FOLDER_UNFOLDED";		var payload_str:String = "id"+_root.FEEDTRACE_PAYLOAD_ATTRIBUTE_NAME_VALUE_SEPARATOR+evt.node.attributes.id;		trace("feedTrace for " + event_str + ", Stimulus " + payload_str);		_level0.currentItemRootLevel.feedTrace(event_str,payload_str,"stimulus"); // FOLDER_UNFOLDED	}		public function updatedInfos():Void	{				trace("Filesystem updatedInfos");				switch (viewMode_str){			case "head":			{				resetFileSystem();				updateCurrentTree(currentPath_str);				break;			} 			case "view":			{								resetFileSystem();				updateCurrentTree(currentPath_str);				break;			} 			case "list":			{					fileSystListView.eraseInfos();				updateCurrentTree(currentFolderId_str);				trace("myNOTIFICATION updateInfos currentFolderId_str "+currentFolderId_str);							break;			}			case "tree":			{				fileSystTreeView.refreshTree(fileSystModel.getXMLFolderTree());				break;			}			default:			{				resetFileSystem();				updateCurrentTree(currentPath_str);			}		}	}			public function updateCurrentTree(path_str:String)	{				trace("FileSystem > updateCurrentTree");						trace("mySEARCH viewMode_str : "+viewMode_str);				currentXMLState_xml=new XML(fileSystModel.getPartialTree(path_str));						if (viewMode_str=="view"){			//var _content=() ? : currentXMLState_xml.firstChild.firstChild.nodeValue;			if (path_str==undefined)			{			path_str=fileSystModel.getXMLFolderTree().firstChild.attributes.id;			}			fileSystDisplayer.displayContent(currentXMLState_xml.firstChild.firstChild.nodeValue);			currentMailId_str=path_str;			trace("myDEL "+currentMailId_str);		}		if (viewMode_str=="head"){			var vHearderText_str:String = "";			var infosColumn_str:String = "";			currentMailId_str=path_str;			var _attributes_ar:Array=fileSystModel.getListHeaderAttributes(path_str);			infosColumn_str = _attributes_ar[1];			var colulmnInfos_array:Array = new Array();			colulmnInfos_array = infosColumn_str.split(";");			var localDataMC_str:String = "";			for (var j=0;j<colulmnInfos_array.length;j++)			{				var _infosColumn_array:Array=colulmnInfos_array[j].split("::");				localDataMC_str = "";				if (currentXMLState_xml.firstChild.attributes.type=="file"){					if(currentXMLState_xml.firstChild.attributes[_infosColumn_array[0] + "displayed"] != undefined){												localDataMC_str = refWindow_mc._exulis.toolbox.wrapRun(currentXMLState_xml.firstChild.attributes[_infosColumn_array[0] + "displayed"],refWindow_mc._exulis._guiSource,"SingleNode","String");					}					else{ 						localDataMC_str = refWindow_mc._exulis.toolbox.wrapRun(currentXMLState_xml.firstChild.attributes[_infosColumn_array[0]],refWindow_mc._exulis._guiSource,"SingleNode","String");					}				}											if (localDataMC_str==""){				vHearderText_str = "";					} else {					vHearderText_str += "<font face='Arial' size='12'><b>" + refWindow_mc._exulis.toolbox.wrapRun(_infosColumn_array[1],refWindow_mc._exulis._guiSource,"SingleNode","String") + ":</b> " + localDataMC_str + "     </font><br />";				}																			}			fileSystHeader.displayContent(vHearderText_str);		}				trace("mySEARCH viewMode_str : "+viewMode_str);		if (viewMode_str=="list"){												if (path_str==undefined)			{				if (currentMailId_str==undefined)				{				path_str=fileSystModel.getXMLFolderTree().firstChild.attributes.id;				} else				{					path_str=currentMailId_str;				}			}						trace("mySEARCH path_str : "+path_str);						currentXMLState_xml=new XML(fileSystModel.getPartialTree(path_str));									trace("mySEARCH currentXMLState_xml : "+currentXMLState_xml);						fileSystListView.eraseInfos();						var _attributes_ar:Array=fileSystModel.getListHeaderAttributes(path_str);									trace("mySEARCH _attributes_ar : "+_attributes_ar);						fileSystListView.createColumns(_attributes_ar[0]);															var _list=fileSystListView.displayList(_attributes_ar[0]);						trace("mySEARCH _list : "+_list);					for (var a=0;a<currentXMLState_xml.firstChild.childNodes.length; a++)			{				if (currentXMLState_xml.firstChild.childNodes[a].attributes.type=="file" and currentXMLState_xml.firstChild.childNodes[a].attributes.visible!="false")				{					fileSystListView.addInfos(currentXMLState_xml.firstChild.childNodes[a],currentXMLState_xml.firstChild.childNodes[a].attributes.id);				}								if (currentXMLState_xml.firstChild.childNodes[a].attributes.id == startPath_str)				{					fileSystListView.highlightItem(a);				}			}										return _list;								} else if (viewMode_str=="sort"){						var _ref=fileSystModel.getRefToControllerByType("list");						fileSystSortView.displayComboBox(_ref);					}		else		{			if (viewMode_str=="tree"){											var _tree=fileSystTreeView.displayTree(fileSystModel.getXMLFolderTree(), path_str);							//fileSystTreeView.setNodeState();				// tree onMouse Down				return _tree;						}			else			{		// display previews folder if not on desktop				if (currentXMLState_xml.firstChild.attributes.id!="desktop")						{					var _previewFolder=fileSystView.displayIcon("../","folder");					currentIco_ar.push(_previewFolder);					_previewFolder.onPress=Relegate.create(this,onPressPreview,currentXMLState_xml);				}							for (var a=0;a<currentXMLState_xml.firstChild.childNodes.length; a++)				{						currentIco_ar.push(_currentMc_mc);												var _currentMc_mc=fileSystView.displayIcon(currentXMLState_xml.firstChild.childNodes[a].attributes.label,currentXMLState_xml.firstChild.childNodes[a].attributes.type);												currentIco_ar.push(_currentMc_mc);												// attribut a press action on each element except file who launch associated application (if declared).											_currentMc_mc.id=currentXMLState_xml.firstChild.childNodes[a].attributes.id;						_currentMc_mc.type=currentXMLState_xml.firstChild.childNodes[a].attributes.type;						_currentMc_mc.click_bool=false;						_currentMc_mc.onPress=Relegate.create(this,onPressIco,_currentMc_mc,currentXMLState_xml.firstChild.childNodes[a]);						_currentMc_mc.onRelease=_currentMc_mc.onReleaseOutside=Relegate.create(this,onReleaseIco,_currentMc_mc);				}			}		}	}	public function displayMail(findInfos_obj,tree_obj,header_obj,view_obj){	trace("TTT displayMail");	// zeCurrentMailInfos_str	var zeCurrentMailId_str=findInfos_obj.id;				if (zeCurrentMailId_str==undefined) return;	var currentFolder_xml=new XML(fileSystModel.getParent(zeCurrentMailId_str)).firstChild;	var currentFolderId_str=currentFolder_xml.attributes.id;	if (viewMode_str=="list" && currentMailId_str!=undefined)	{		// erase current mail		fileSystListView.eraseInfos();		// list current attributes		var currentAttributes_ar:Array=fileSystModel.getListHeaderAttributes(currentFolderId_str);		trace("YYY currentAttributes_ar: "+currentAttributes_ar);		// create column in list view		fileSystListView.createColumns(currentAttributes_ar[0]);		// display tree		tree_obj.fileSystTreeView.clearHighlight();		tree_obj.updateCurrentTree(currentFolderId_str);		// mail view		view_obj.fileSystDisplayer.emptyView();		header_obj.fileSystHeader.emptyView();		// update sortView		var _refToSort=fileSystModel.getRefToControllerByType("sort");		_refToSort.updateCurrentTree();		// display mails in view		var zeCurrentMailPosition=0;		for (var m=0;m<currentFolder_xml.childNodes.length;m++)		{			if (currentFolder_xml.childNodes[m].attributes.type=="file" && currentFolder_xml.childNodes[m].attributes.visible!="false")			{				fileSystListView.addInfos(currentFolder_xml.childNodes[m],currentFolder_xml.childNodes[m].attributes.id);				// store current mail position				if (currentFolder_xml.childNodes[m].attributes.id==zeCurrentMailId_str)				{					zeCurrentMailPosition = m;				}			}		}		// focus and highlight on a mail		fileSystListView.highlightItem(zeCurrentMailPosition);		// display header		var infosColumn_str = currentAttributes_ar[0];			var columnInfos_array = infosColumn_str.split(";");		var localDataMC_str:String = "";		header_obj.vHearderText_str="";				for (var j=0;j<columnInfos_array.length;j++)		{			var _infosColumn_array:Array=columnInfos_array[j].split("::");			localDataMC_str = "";			if (currentFolder_xml.childNodes[zeCurrentMailPosition].attributes.type=="file"){				if(currentFolder_xml.childNodes[zeCurrentMailPosition].attributes[_infosColumn_array[0] + "displayed"] != undefined){					localDataMC_str = refWindow_mc._exulis.toolbox.wrapRun(currentFolder_xml.childNodes[zeCurrentMailPosition].attributes[_infosColumn_array[0] + "displayed"]);				}				else{ 					localDataMC_str = refWindow_mc._exulis.toolbox.wrapRun(currentFolder_xml.childNodes[zeCurrentMailPosition].attributes[_infosColumn_array[0]]);				}			}			if (localDataMC_str!="")			{				localDataMC_str=(localDataMC_str==undefined || localDataMC_str=="undefined") ? "" : localDataMC_str;				header_obj.vHearderText_str += "<font face='Arial' size='12'><b>" + refWindow_mc._exulis.toolbox.wrapRun(_infosColumn_array[1],refWindow_mc._exulis._guiSource,"SingleNode","String") + ":</b> " + localDataMC_str + "     </font><br />";			}		}		header_obj.fileSystHeader.displayContent(header_obj.vHearderText_str);		view_obj.fileSystDisplayer.displayContent(currentFolder_xml.childNodes[zeCurrentMailPosition].firstChild.nodeValue);	}	// select text in message	view_obj.fileSystDisplayer.highlightText(findInfos_obj.indexResult,findInfos_obj.wordLength);}	private function itemRollOver(eventObject:Object):Void	{		trace("itemRollOver ");		currentMailId_str=(eventObject.target.getItemAt(eventObject.index).id!=undefined) ? eventObject.target.getItemAt(eventObject.index).id : currentMailId_str;		trace("DEBUGMAIL FS : "+currentMailId_str);		// added to avoid problem when cancel drag		if (fileSystModel.getParent(currentMailId_str)!=undefined)		{		currentFolderId_str=new XML(fileSystModel.getParent(currentMailId_str)).firstChild.attributes.id;		}		trace("myLIST > "+currentFolderId_str);		} 		// list or tree press	// [change]	private function change(eventObject:Object):Void	{		trace("Filesystem change");		var t = eventObject.target;				switch (viewMode_str){		case "tree":		{		 				trace("Filesystem change tree");			var selNode:XMLNode = t.selectedNode;//			_root.refreshListMC(selNode.attributes.id);			currentFolderId_str=selNode.attributes.id;						trace("feedTrace for FOLDER_VIEWED, Stimulus " + "id"+_root.FEEDTRACE_PAYLOAD_ATTRIBUTE_NAME_VALUE_SEPARATOR+selNode.attributes.id);			_level0.currentItemRootLevel.feedTrace("FOLDER_VIEWED","id"+_root.FEEDTRACE_PAYLOAD_ATTRIBUTE_NAME_VALUE_SEPARATOR+selNode.attributes.id,"stimulus");						trace("myNOTIFICATION currentFolderId_str > "+currentFolderId_str);						if (selNode.attributes.oncommand)			{				eventObject.target._parent._exulis.toolbox.wrapRun(String(selNode.attributes["oncommand"]),eventObject.target._parent._exulis);			}						fileSystTreeView.clearHighlight();						if(selNode.attributes.id!=undefined)			{			t._parent._parent.listview.view.updateCurrentTree(selNode.attributes.id);			}						// update sortView			var _refToSort=fileSystModel.getRefToControllerByType("sort");						_refToSort.updateCurrentTree();						if(selNode.attributes.id!=undefined)			{			t._parent._parent.mailview.view.fileSystDisplayer.emptyView();			t._parent._parent.headerview.view.fileSystHeader.emptyView();			}						// disable reply, reply all, forward						menuState(t._parent,"inactive");									break;					}				case "list":		{							trace("Filesystem change list "+selItem.id);						var selItem = t.selectedItem;						//			_root.displayContent(selItem.id);//			_root.displayHeadContent(selItem.id);												if (selItem.id!=undefined)			{							t._parent._parent.mailview.view.updateCurrentTree(selItem.id);				t._parent._parent.headerview.view.updateCurrentTree(selItem.id);								trace("feedTrace for MAIL_VIEWED, Stimulus " + "id"+_root.FEEDTRACE_PAYLOAD_ATTRIBUTE_NAME_VALUE_SEPARATOR+selItem.id);				_level0.currentItemRootLevel.feedTrace("MAIL_VIEWED","id"+_root.FEEDTRACE_PAYLOAD_ATTRIBUTE_NAME_VALUE_SEPARATOR+selItem.id,"stimulus");			}							fileSystListView.clearhighlightItem();									if (selItem.id=="u23_item305")			{				t._parent._exulis._targetExecutionLayer._objDefsRepository.retrieve("mailApp")._exulis.resetText();			}						// active reply, reply all, forward						trace("myTPARENT "+t._parent);						menuState(t._parent,"active");							/*	if (eventObject.target.selectedItem.id!=undefined)			{			currentMailId_str=eventObject.target.selectedItem.id;						trace("myNOTIFICATION currentMailId_str > "+currentMailId_str);						currentFolderId_str=new XML(fileSystModel.getParent(currentMailId_str)).firstChild.attributes.id;			}*/		}		}	}		public function menuState(ref,state_str)	{				var myButton_ar=ref._exulis._targetExecutionLayer.buttonsMailer_str.split("|");				trace("myTPARENT "+myButton_ar);				if (state_str=="active")		{			for (var f in myButton_ar)			{				ref._exulis._targetExecutionLayer._objDefsRepository.retrieve(myButton_ar[f])._exulis._objDef["disabled"]=false;				ref._exulis._targetExecutionLayer._objDefsRepository.retrieve(myButton_ar[f])._exulis.setActive();			}		} else if (state_str=="inactive")			{				for (var f in myButton_ar)				{				ref._exulis._targetExecutionLayer._objDefsRepository.retrieve(myButton_ar[f])._exulis._objDef["disabled"]=true;				ref._exulis._targetExecutionLayer._objDefsRepository.retrieve(myButton_ar[f])._exulis.setInactive();				}			}	}		public function setViewMode(mode_str:String):Void	{				viewMode_str=mode_str;			}		public function getViewMode():String	{				return viewMode_str;			}			public function getCurrentPath():String	{		return currentPath_str;	}			private function onPressPreview(currentMc_mc):Void	{		// double click					if (!currentMc_mc.click_bool) {						currentMc_mc.timer = getTimer()/1000;			currentMc_mc.click_bool = true;						//On regarde si il y a un double clic			} else {			currentMc_mc.timer2 = getTimer()/1000;									//Si c'est un double clic			if ((currentMc_mc.timer2-currentMc_mc.timer)<.25) {			//On affiche le movieclip			resetFileSystem();						var _parentTree=new XML(fileSystModel.getParent(currentMc_mc.childNodes[0].attributes.id));						this.currentPath_str=_parentTree.firstChild.attributes.id;			// store id of current state for move action			updateCurrentTree(_parentTree.firstChild.attributes.id);			fileSystView.setIdPathRef(_parentTree.firstChild.attributes.id);			//Si ce n'est pas un double clic, on reset la variable a simple clic			} else {			currentMc_mc.timer  = getTimer()/1000;			currentMc_mc.click_bool = true;						}			}					}			private function onPressIco(currentMc_mc,node_xml):Void	{					// instance ref to the current element node (usefull to retrieve id or style and so on)			currentNode_xml=node_xml;					// double click					if (!currentMc_mc.click_bool) {						currentMc_mc.timer = getTimer()/1000;			currentMc_mc.click_bool = true;						//On regarde si il y a un double clic			} else {			currentMc_mc.timer2 = getTimer()/1000;									//Si c'est un double clic			if ((currentMc_mc.timer2-currentMc_mc.timer)<.25) {			//On affiche le movieclip			if (node_xml.attributes.type!="file")			{			resetFileSystem();			this.currentPath_str=node_xml.attributes.id;			// store id of current state for move action			fileSystView.setIdPathRef(node_xml.attributes.id);						updateCurrentTree(node_xml.attributes.id);			} else							{					_root.viewer_mc._visible=true;					_root.viewer_mc.output_tf.htmlText=node_xml.firstChild.nodeValue;					_root.viewer_mc.swapDepths(_root.getNextHighestDepth());				}						//Si ce n'est pas un double clic, on reset la variable a simple clic			} else {									fileSystView.setIdPathRef(this.currentPath_str);						currentMc_mc.timer  = getTimer()/1000;			currentMc_mc.click_bool = true;						}			}				// attribut a press action on each element except file who launch associated application (if declared).				currentMc_mc.startDrag();		currentMc_mc._alpha=40;		fileSystView.getRef().swapDepths(_root.getNextHighestDepth());		_root.viewer_mc.swapDepths(_root.getNextHighestDepth());		_root.rename_mc.input_tf.text=node_xml.attributes.label;		_root.rename_mc.btrename_mc.onPress=Relegate.create(this,onPressRename,node_xml);				}		private function onPressRename(node_xml):Void	{		fileSystModel.renameItem(node_xml.attributes.id,_root.rename_mc.input_tf.text);		resetFileSystem();					var _parentTree=new XML(fileSystModel.getParent(node_xml.attributes.id));		this.currentPath_str=_parentTree.firstChild.attributes.id;		// store id of current state for move action				updateCurrentTree(_parentTree.firstChild.attributes.id);			}				private function onReleaseIco(currentMc_mc):Void	{		// attribut a press action on each element except file who launch associated application (if declared).					currentMc_mc.stopDrag();			currentMc_mc._alpha=100;			var _dropMC_mc=eval(currentMc_mc._droptarget);											if (_dropMC_mc._parent._parent!=fileSystView.getRef())			{				//fileSystModel.moveItem(_dropMC_mc._parent._parent.id,currentNode_xml.attributes.id);				fileSystModel.moveItem(currentNode_xml.attributes.id,_dropMC_mc._parent._parent.id);			}		}		private function resetFileSystem():Void	{		removeClip(currentIco_ar);		emptyArray(currentIco_ar);		fileSystView.resetPosition();	}		private function emptyArray(array)	{		while (array.length>0)		{			array.pop();					}	}		private function removeClip(array)	{		for (var mc in array)		{			array[mc].removeMovieClip();					}	}	}