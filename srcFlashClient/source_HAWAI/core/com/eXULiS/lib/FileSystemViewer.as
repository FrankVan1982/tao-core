import com.eXULiS.lib.*;class com.eXULiS.lib.FileSystemViewer  {	private var depth_nbr:Number;		private var clipRef_mc:MovieClip;		private var container_mc:MovieClip;	private var myField_txt:TextField;		private var xulWindow_mc:MovieClip;		private var yOffset_nbr:Number=0;	public var myController;		private var verifHeight_nbr:Number;	private var currentStyle_str:String;	private var styleInfos_array:Array;		private var toolbox:Toolbox;	public function FileSystemViewer(fileSystView_mc,myController)	{		trace("CONSTRUCTOR [FileSystemViewer] viewer pane");		this.xulWindow_mc=fileSystView_mc;		this.myController=myController;		depth_nbr=2;		toolbox=new Toolbox();		init();	}		private function init():Void	{		styleInfos_array=new Array();		clipRef_mc=xulWindow_mc;		clipRef_mc.depth_nbr=0;		createViewContainer();		container_mc._y=yOffset_nbr;				}		public function displayView()	{		myField_txt=xulWindow_mc.createTextField("tField", clipRef_mc.depth_nbr, 0,0+yOffset_nbr,xulWindow_mc._exulis.width-12,xulWindow_mc._exulis.height-yOffset_nbr);		myField_txt.html=true;		myField_txt.autoSize="Left";		myField_txt.background=true;		myField_txt.wordWrap=true;		myField_txt.multiline=true;		clipRef_mc.depth_nbr++;				trace("mySEARCH "+myField_txt);			/*	myField_txt.onKillFocus=function(myEvent)		{						trace("myTEST ok "+this);					} */						return xulWindow_mc.tField;	}		public function emptyView()	{		trace("TREEPRESS emptyview");		myField_txt.htmlText="";	}		public function setStyle()	{		currentStyle_str=arguments[0];				if (currentStyle_str.substr(-1)==";")		{			currentStyle_str=currentStyle_str.substring(0,currentStyle_str.length-1);		} 						var _currentStyle_array:Array=currentStyle_str.split(";");				for (var j in _currentStyle_array)		{			styleInfos_array.push(_currentStyle_array[j].split(":"));		}	}			public function highlightText(idx_nb,wordLength)	{			Selection.setFocus(myField_txt);		Selection.setSelection(idx_nb,(idx_nb+wordLength));			trace("HHH idx_nb : "+idx_nb+" wordLength : "+wordLength+" myField_txt : "+myField_txt+" Selection.getFocus()"+Selection.getFocus());				_root.myField_txt=myField_txt;		_root.idx_nb=idx_nb;		_root.wordLength=wordLength;				_root.onEnterFrame=function()		{			Selection.setFocus(_root.myField_txt);			if (eval(Selection.getFocus())==_root.myField_txt)			{				Selection.setSelection(_root.idx_nb,(_root.idx_nb+_root.wordLength));				delete this.onEnterFrame;			}		}						}		public function displayContent(infos_txt)	{		trace("[FileSystemViewer] displayContent: infos_txt = " + infos_txt);		clearInterval(verifHeight_nbr);		var _tFieldBeforeHeight_nb=myField_txt._height;		if (infos_txt==undefined) infos_txt="";				// apply style;		if (styleInfos_array.length>0)		{			var my_fmt:TextFormat = new TextFormat();						for (var o in styleInfos_array)			{							if (styleInfos_array[o][0].toLowerCase()=="font-family")				{					my_fmt.font = styleInfos_array[o][1];				} else if (styleInfos_array[o][0].toLowerCase()=="font-size")					{						my_fmt.size = parseInt(styleInfos_array[o][1]);											}							}						myField_txt.setNewTextFormat(my_fmt);			 		}				myField_txt.htmlText=toolbox.wrapRun(infos_txt);		verifHeight_nbr=setInterval(verifTfield,200,_tFieldBeforeHeight_nb, myController, verifHeight_nbr);		var timeOutId=_global.setTimeout(killTimeOut,1500,verifHeight_nbr, timeOutId);			}		private function killTimeOut(idTimer:Number, zisTimer:Number):Void	{		clearInterval(idTimer);		clearInterval(zisTimer);	}			private function verifTfield(tFieldBeforeHeight_nb, controller, idInterval):Void	{					if (myField_txt._height!=tFieldBeforeHeight_nb)			{				controller.listenersNotify();				clearInterval(idInterval);			}	}			public function setRef(fileSystView_mc:MovieClip)	{		this.xulWindow_mc=fileSystView_mc;	}		public function getRef():MovieClip	{		return xulWindow_mc;	}		public function getIdPathRef():String	{		return xulWindow_mc.id;	}		// embed current id in window for moving object	public function setIdPathRef(id_str:String):Void	{		xulWindow_mc.id=id_str;	}		private function createViewContainer():Void	{		container_mc=clipRef_mc.createEmptyMovieClip("view"+clipRef_mc.depth_nbr,clipRef_mc.depth_nbr);		clipRef_mc.depth_nbr++;		displayView();	}}