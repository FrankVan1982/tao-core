class com.eXULiS.lib.defsRepository {	private var _defsRepository_obj:Object;	private var _objCpt_num:Number;	function defsRepository() {		_defsRepository_obj = new Object();		_objCpt_num = 0;	}	function clean() {		trace("defsRepository (clean): access");		delete(_defsRepository_obj);		_defsRepository_obj = new Object();		_objCpt_num = 0;	}	function add(id, obj){		trace("defsRepository (add): request to add '" + id + "' to the repository (reference: " + obj + ")");		if(_defsRepository_obj[id] == undefined){			_defsRepository_obj[id] = obj;			_objCpt_num++ ;			trace("defsRepository (add): '" + id + "' effectively added");		}		else{			trace("defsRepository (add): '" + id + "' already exists (reference: " + _defsRepository_obj[id] + ")");		}		return _objCpt_num;	}	function remove(id){		trace("defsRepository (remove request to remove '" + id + "' from the repository");		if(_defsRepository_obj[id] == undefined){			trace("defsRepository (remove): '" + id + "' does not exist");		}		else{			_defsRepository_obj[id] = undefined;			trace("defsRepository (remove): '" + id + "' has been removed");		}		return _objCpt_num;	}	function replace(id, obj){		trace("defsRepository (replace): request to replace '" + id + "' in the repository by " + obj);		_defsRepository_obj[id] = obj;		trace("defsRepository (replace): '" + id + "' already exists (reference: " + _defsRepository_obj[id] + ")");		return _objCpt_num;	}	function retrieve(id:String){		var idParser_array:Array = new Array();		idParser_array = id.split("#");		id = (idParser_array.length == 1)? idParser_array[0] : (idParser_array.length == 2) ? idParser_array[1] : id;		trace("defsRepository (retrieve): access for '" + id + "' returned reference: " + _defsRepository_obj[id]);		return _defsRepository_obj[id]; // clean and easy	}	function list(){		trace("defsRepository (list): access");		for (var nam in _defsRepository_obj) {			trace("defsRepository (list) _defsRepository_obj."+nam+" = "+_defsRepository_obj[nam]);		}		return(_objCpt_num); // clean and easy	}	function cat(){		trace("defsRepository (cat): access");		for (var nam in _defsRepository_obj) {			trace("defsRepository (cat): ["+nam+"]");		}		return(_objCpt_num); // clean and easy	}	function get(start_num:Number, count_num:Number){		trace("defsRepository (get): access");		var result_array:Array = new Array();		var maxCpt_num:Number = (isNaN(start_num)) ? _objCpt_num : _objCpt_num - start_num;		var startCpt_num:Number = (isNaN(count_num)) ? 0 : maxCpt_num - count_num;		var vCpt_num:Number=0;		trace("defsRepository (get): startCpt_num = " + startCpt_num);		trace("defsRepository (get): maxCpt_num = " + maxCpt_num);		trace("defsRepository (get): maxCpt_num = " + maxCpt_num);		trace("defsRepository (get): _defsRepository_obj.length = " + _objCpt_num);		for (var nam in _defsRepository_obj) {			if((vCpt_num >= startCpt_num) && (vCpt_num<maxCpt_num)){				result_array.push(_defsRepository_obj[nam]);
				trace("defsRepository (get)["+vCpt_num+"]: "+_defsRepository_obj[nam]);			}			vCpt_num++;
		}		return(result_array); // clean and easy	}	function destroy(){		trace("defsRepository (destroy) for " + _defsRepository_obj.length + " children to be deleted");		for(var obj in _defsRepository_obj){			_defsRepository_obj[obj]._exulis.destroy();		}	}}