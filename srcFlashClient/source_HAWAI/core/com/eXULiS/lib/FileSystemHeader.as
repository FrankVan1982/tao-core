import com.eXULiS.lib.*;class com.eXULiS.lib.FileSystemHeader {		private var depth_nbr:Number;		private var clipRef_mc:MovieClip;		private var container_mc:MovieClip;	private var myField_txt:TextField;		private var xulWindow_mc:MovieClip;		private var yOffset_nbr:Number=0;	private var myController;		private var verifHeight_nbr:Number;		private var toolbox:Toolbox;		public function FileSystemHeader(fileSystView_mc,myController)	{		trace("CONSTRUCTOR [FileSystemHeader]");		this.xulWindow_mc=fileSystView_mc;		this.myController=myController;		depth_nbr=3;		toolbox=new Toolbox();		init();	}		private function init():Void	{		clipRef_mc=getRef();		clipRef_mc.depth_nbr=0;				createViewContainer();		container_mc._y=yOffset_nbr;				}		public function displayView()	{		myField_txt=xulWindow_mc.createTextField("tField", clipRef_mc.depth_nbr, 0,0+yOffset_nbr,xulWindow_mc._exulis.width-12,xulWindow_mc._exulis.height-yOffset_nbr);				myField_txt.html=true;		myField_txt.autoSize="Left";		myField_txt.background=false;		myField_txt.wordWrap=false;		myField_txt.multiline=true;		myField_txt.selectable=false;		clipRef_mc.depth_nbr++;		//refreshTree(xml_str);		return xulWindow_mc.tField;	}		public function emptyView()	{		trace("TREEPRESS emptyview");		myField_txt.htmlText="";	}		public function displayContent(infos_txt)	{		trace("[FileSystemHeader] displayContent: infos_txt = " + infos_txt);		clearInterval(verifHeight_nbr);				var _tFieldBeforeHeight_nb=myField_txt._height;		myField_txt.htmlText=toolbox.wrapRun(infos_txt);				verifHeight_nbr=setInterval(verifTfield,200,_tFieldBeforeHeight_nb, myController, verifHeight_nbr);				var timeOutId=_global.setTimeout(killTimeOut,1500,verifHeight_nbr, timeOutId);	}		private function killTimeOut(idTimer:Number, zisTimer:Number):Void	{		clearInterval(idTimer);		clearInterval(zisTimer);	}		private function verifTfield(tFieldBeforeHeight_nb, controller, idInterval):Void	{		if (myField_txt._height!=tFieldBeforeHeight_nb)		{			controller.listenersNotify();			clearInterval(idInterval);		}	}		public function setRef(fileSystView_mc:MovieClip)	{		this.xulWindow_mc=fileSystView_mc;			}		public function getRef():MovieClip	{		return xulWindow_mc;	}			public function getIdPathRef():String	{		return xulWindow_mc.id;	}		// embed current id in window for moving object	public function setIdPathRef(id_str:String):Void	{		xulWindow_mc.id=id_str;			}		private function createViewContainer():Void	{		container_mc=clipRef_mc.createEmptyMovieClip("view"+clipRef_mc.depth_nbr,clipRef_mc.depth_nbr);				clipRef_mc.depth_nbr++;		displayView();	}		}