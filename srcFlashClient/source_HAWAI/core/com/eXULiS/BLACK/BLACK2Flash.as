import lu.tao.utils.Event;import com.eXULiS.BLACK.*;/*** BLACK 2 SWF* @author Raynald Jadoul* @description Translates BLACK markups in Flash native components* @usage data = new BLACK2Flash().parseXML(anXML);*/class com.eXULiS.BLACK.BLACK2Flash extends XML {    private var oResult:Object = new Object ();	    private var oXML:XML;	private var canvas_mc:MovieClip;/*** * Constructor* * initializes the canvas movie clip*/	function BLACK2Flash(target_mc:MovieClip) {		canvas_mc = target_mc;//		trace("BLACK2Flash: canvas initialized to " + canvas_mc + " (base was " + target_mc + "[" + target_mc._name + "])");	}	public function destroy(){		for(var vCpt=0;vCpt < canvas_mc._exulis._objDescendants.length;vCpt++){			canvas_mc._exulis._objDescendants[vCpt].destroy();		}		canvas_mc.removeMovieClip();	}/*** @method get xml* @description return the xml passed in the parseXML method* @usage theXML = BLACK2Flash.xml*/    public function get xml():XML{        return oXML    }// here we connect the canvas to the BLACK construction    private function black_business(node:XML,current_mc){//		trace("BLACK2Flash: BLACK business (" + node.attributes["id"] + ") triggered on " + current_mc._black.id + " on depth: " + current_mc._childNextDepth);		var object_obj = new BLACKbusiness(current_mc,node);		var local_mc;		local_mc = object_obj.create();		return local_mc;    }    private function black_layout(node:XML,current_mc){//		trace("BLACK2Flash: BLACK layout (" + node.attributes["id"] + ") triggered on " + current_mc._black.id + " on depth: " + current_mc._childNextDepth);		var object_obj = new BLACKlayout(current_mc,node);		var local_mc;		local_mc = object_obj.create();		return local_mc;    }    private function black_action(node:XML,current_mc){//		trace("BLACK2Flash: BLACK action (" + node.attributes["id"] + ") triggered on " + current_mc._black.id + " on depth: " + current_mc._childNextDepth);		var object_obj = new BLACKaction(current_mc,node);		var local_mc;		local_mc = object_obj.create();		return local_mc;    }    private function black_content(node:XML,current_mc){//		trace("BLACK2Flash: BLACK content (" + node.attributes["id"] + ") triggered on " + current_mc._black.id + " on depth: " + current_mc._childNextDepth);		var object_obj = new BLACKcontent(current_mc,node);		var local_mc;		local_mc = object_obj.create();		return local_mc;    }    private function black_knowledge(node:XML,current_mc){//		trace("BLACK2Flash: BLACK knowledge (" + node.attributes["id"] + ") triggered on " + current_mc._black.id + " on depth: " + current_mc._childNextDepth);		var object_obj = new BLACKknowledge(current_mc,node);		var local_mc;		local_mc = object_obj.create();		return local_mc;    }    private function black_manifest(node:XML,current_mc){//		trace("BLACK2Flash: BLACK manifest (" + node.attributes["id"] + ") triggered on " + current_mc._black.id + " on depth: " + current_mc._childNextDepth);		var object_obj = new BLACKmanifest(current_mc,node);		var local_mc;		local_mc = object_obj.create();		return local_mc;    }    private function black_fileSystem(node:XML,current_mc){//		trace("BLACK2Flash: BLACK filesystem (" + node.attributes["id"] + ") triggered on " + current_mc._black.id + " on depth: " + current_mc._childNextDepth);		var object_obj = new BLACKfileSystem(current_mc,node);		var local_mc;		local_mc = object_obj.create();		return local_mc;    }    private function black_xliffHandler(node:XML,current_mc){//		trace("BLACK2Flash: BLACK xliffHandler (" + node.attributes["id"] + ") triggered on " + current_mc._black.id + " on depth: " + current_mc._childNextDepth);		var object_obj = new BLACKxliffHandler(current_mc,node);		var local_mc;		local_mc = object_obj.create();		return local_mc;    }	private function black_spreadSheet(node:XML,current_mc){//		trace("BLACK2Flash: BLACK filesystem (" + node.attributes["id"] + ") triggered on " + current_mc._black.id + " on depth: " + current_mc._childNextDepth);		var object_obj = new BLACKspreadSheet(current_mc,node);		var local_mc;		local_mc = object_obj.create();		return local_mc;    }    private function black_listBoxDatas(node:XML,current_mc){//		trace("BLACK2Flash: BLACK listBoxDatas (" + node.attributes["id"] + ") triggered on " + current_mc._black.id + " on depth: " + current_mc._childNextDepth);		var object_obj = new BLACKlistBoxDatas(current_mc,node);		var local_mc;		local_mc = object_obj.create();		return local_mc;    }	private function black_tabsheader(node:XML,current_mc){//		trace("BLACK2Flash: BLACK tabsheader (" + node.attributes["id"] + ") triggered on " + current_mc._black.id + " on depth: " + current_mc._childNextDepth);		var object_obj = new BLACKtabsheader(current_mc,node);		var local_mc;		local_mc = object_obj.create();		return local_mc;    }/*** @method translateXML* @description core of the BLACK2Flash class*/    public function translateXML(node:XML, current_mc) {		var local_mc:MovieClip;		var originalId:String;		var _type:String = "";		var _nodeName:String = node.nodeName;		_nodeName = node.nodeName;		_type = (_nodeName.indexOf(":") == -1) ? _nodeName : _nodeName.substr(_nodeName.indexOf(":") + 1);// GUI factory begins here		originalId = node.attributes.id;		switch (_type){			case "business":			case "Business":				local_mc = black_business(node,current_mc);				break;			case "layout":			case "Layout":				local_mc = black_layout(node,current_mc);				break;			case "action":			case "Action":				local_mc = black_action(node,current_mc);				break;			case "content":			case "Content":				local_mc = black_content(node,current_mc);				break;			case "knowledge":			case "Knowledge":				local_mc = black_knowledge(node,current_mc);				break;			case "manifest":			case "Manifest":				local_mc = black_manifest(node,current_mc);				break;			case "filesystem":				local_mc = black_fileSystem(node,current_mc);				break;			case "spreadsheet":				local_mc = black_spreadSheet(node,current_mc);				break;			case "listboxdatas":				local_mc = black_listBoxDatas(node,current_mc);				break;			case "tabsheader":				local_mc = black_tabsheader(node,current_mc);				break;			case "xliffhandler":				local_mc = black_xliffHandler(node,current_mc);				break;// elements not yet implemented/*			case "use":				local_mc = black_use(node,current_mc);				break;*/// here unhandled tags			default:				trace("BLACK2Flash: BLACK tag undefined: " + node.nodeName);				local_mc = current_mc;		}		if(originalId != undefined){			var vTmpCptDefs_num:Number;			vTmpCptDefs_num = local_mc._exulis._targetExecutionLayer._objDefsRepository.add(node.attributes.id, local_mc);//			trace("BLACK2Flash: (objDefsRepository) after '" + node.attributes.id + "', "+ vTmpCptDefs_num + " items are now registered");		}		return local_mc;	}}