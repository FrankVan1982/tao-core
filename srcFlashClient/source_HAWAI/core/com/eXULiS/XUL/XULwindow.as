import com.eXULiS.XUL.XULelement;import flash.filters.GlowFilter;import com.eXULiS.XUL.XULtextbox;class com.eXULiS.XUL.XULwindow extends XULelement {		private var _obj:MovieClip;	private var currentTitleBar_mc:MovieClip;	private var currentDragZone_mc:MovieClip;	private var currentBackground:MovieClip;	//private var _childNextDepth;	private var killWindow_mc:MovieClip;	private var titleBarText_txt:TextField;		function XULwindow(xulParent,xulDef:XMLNode) {		super(xulParent,xulDef);		_defaultWidth = 100;		_defaultHeight = 100;		//_childNextDepth=1;	}		function create(){		trace("XULwindow (create): window (" + id + ") on " + _objParent + " on depth: " + _objParent._childNextDepth);		_obj = _objParent.createEmptyMovieClip(_objDef.attributes["id"],_objParent._childNextDepth);		_objDef.attributes["flex"] = 1;		_obj = super.create(_obj,this,1);		if((_objDef.attributes["url"] != undefined)){			var notFound_bool:Boolean = true;			var _inspector_obj = _objParent;			var sourceID_str:String;			while(notFound_bool){				_inspector_obj = _inspector_obj._parent;				trace("XULwindow met id: " + _inspector_obj._exulis.id + " with content: " + _inspector_obj._exulis._type);				if(_inspector_obj._exulis._type == "overlay"){					_inspector_obj._exulis.holdTitle_str = (_objDef.attributes["title"]==undefined) ? "untitled" : toolbox.wrapRun(_objDef.attributes["title"], _guiSource,"SingleNode","String");										_inspector_obj._exulis.holdURL_str = toolbox.wrapRun(_objDef.attributes["url"], _guiSource,"SingleNode","String");					notFound_bool = false;				}				if(_inspector_obj == _root){					notFound_bool = false;				}			}		}		currentBackground=_obj.createEmptyMovieClip("backg",_obj._childNextDepth++);		updateWindowBackground();		setLayout();		onLoad();		preventRollOver();		if(_objDef.attributes["titlebar"]=="true")		{			createTitleBar();			if(_objDef.attributes["dragable"]=="true")			{				dragWindow();			}		    if (_objDef.attributes["close"]=="true")			{				createKillWindowsButton();			}						if (_objDef.attributes["modale"]=="true")			{				createModaleWindow();			}		// add glow filter			var glow:GlowFilter = new GlowFilter(0x0000, 0.6, 4, 4, 2, 3);			_obj.filters = [glow];		}		return _obj;	}		function createModaleWindow()	{		var blocker=this._targetExecutionLayer._objDefsRepository.retrieve("desktop").createEmptyMovieClip("myblocker",19999999);		blocker.beginFill("0xff0000",0);		blocker.moveTo(0,0);		blocker.lineTo(50,0);		blocker.lineTo(50,50);		blocker.lineTo(0,50);		blocker.lineTo(0,0);		blocker.endFill();				blocker.onPress=function()		{					}				blocker._width=1000;		blocker._height=1000;				blocker.useHandCursor=false;	}			function onLoad()	{		for(var vCpt_num:Number = 0;vCpt_num < _actions.length;vCpt_num++){			var vAction_obj:Object = _actions[vCpt_num];			if(vAction_obj.type == "load"){				trace("XUL2SWF: fullpath onload");				toolbox.wrapRun(vAction_obj.action,this);				trace("cellPress onLoad");			}		}			}	function setLayout(){		trace("XULwindow (setLayout) for " + id + ": special properties setting, top:" + this.top + " left:" + this.left)		_obj._y = this.top;		_obj._x = this.left;		_obj._visible=this._visibilityState;	}		function destroy(){		trace("XULwindow (destroy) for " + id + ": " + _objDescendants.length + " children to be deleted");		for(var vCpt=0;vCpt < _objDescendants.length;vCpt++){			_objDescendants[vCpt]._exulis.destroy();		}		_obj.removeMovieClip();	}	private function createTitleBar():Void {				currentTitleBar_mc = _obj.createEmptyMovieClip("titleBar",_obj._childNextDepth++);		var _title = _objDef.attributes["title"];		var _style = (_objDef.attributes["style"] == undefined) ? "" : ' style="' + _objDef.attributes["style"] + '"';		var _tag_str = '<description id="' + id + '_title0" left="5" top="2" width="' + String(this.width - 25) + '" height="20" value="' + _title + '" ' + _style + '/>';	trace("createTitleBar _tag_str="+_tag_str);		var node:XML = new XML(_tag_str);		var object_obj = new XULtextbox(_obj,node.firstChild);		var _title_mc = object_obj.create();	trace("createTitleBar _title_mc="+_title_mc);		currentTitleBar_mc.title_txt = _title_mc;		titleBarText_txt = _title_mc;//		titleBarText_txt=currentTitleBar_mc.createTextField("title_txt",4,5,2,this.width-25,20);		titleBarText_txt.wordWrap=false;//		titleBarText_txt.html=true;		titleBarText_txt.selectable=false;		//titleBarText_txt.border=true;		//titleBarText_txt.html="<font align='center'>untitled</font>";//		setTitle("<font face='Arial'>"+_title+"</font>");		updateTitleBarBackground();		//dragWindow();	}	public function setTitle(zetext)	{		titleBarText_txt.htmlText="<p align='center'>"+zetext+"</p>";	}	private function updateTitleBarBackground():Void {		trace("[updateTitleBarBackground]");						// title-background-color;				var _style_str:String = _objDef.attributes["style"];				if (_style_str.indexOf("title-background-color")!=-1)		{			var _currentStyle_array=_style_str.split(";");		}				for (var g in _currentStyle_array)		{			if (_currentStyle_array[g].indexOf("title-background-color")!=-1)			{				var _colorvalue_array=_currentStyle_array[g].split(":");			}		}				var _color_str= (_colorvalue_array[1]!=undefined) ?  _colorvalue_array[1] : "0x0066ff";								if (_color_str.indexOf("#")!=-1)		{			_color_str="0x"+_color_str.substr(1);		}						//_color_str = (_color_str==undefined) ? 0x0066ff : _color_str				//var _color_nb:Number= (_color_str==undefined) ? 0x0066ff : Number(_color_str);		 trace("myColor "+_color_str);						currentDragZone_mc = currentTitleBar_mc.createEmptyMovieClip("DragtitleZone",10);				trace("createTitleBar :"+this.width);		currentDragZone_mc.clear();		currentDragZone_mc.beginFill(_color_str,100);		currentDragZone_mc.moveTo(0,0);		currentDragZone_mc.lineTo(this.width,0);		currentDragZone_mc.lineTo(this.width,20);		currentDragZone_mc.lineTo(0,20);		currentDragZone_mc.lineTo(0,0);		currentDragZone_mc.endFill();	}	private function updateWindowBackground():Void {		trace("[updateWindowBackground]");				currentBackground.clear();		currentBackground.beginFill(0xffffff,100);		currentBackground.moveTo(0,0);		currentBackground.lineTo(300,0);		currentBackground.lineTo(300,20);		currentBackground.lineTo(0,20);		currentBackground.lineTo(0,0);		currentBackground.endFill();				currentBackground._width=_obj._exulis.width		currentBackground._height=_obj._exulis.height;	}		// avoid to react with other window back to this window	private function preventRollOver():Void{		currentBackground.onRollOver=function()		{			//		}		currentBackground.useHandCursor=false;	}		private function dragWindow():Void	{		//currentTitleBar_mc.tBar=			currentDragZone_mc.onPress=onDrag;		currentDragZone_mc.onRelease=onReleaseOutside=onStopDrag;	}		private function killWindow():Void	{		killWindow_mc.onRelease=killWindow_mc.onReleaseOutside=onKillWindows;		killWindow_mc.onRollOver=onOverWindows;		killWindow_mc.onRollOut=onOutWindows;	}		private function onKillWindows():Void	{		trace("XULwindow (onKillWindows) for " + _parent._parent.exulis.id);//		this._parent._parent._exulis.destroy();		var sourceID_str:String;				var _myWindow = _parent._parent;				for (var i in _myWindow.buttonRefToShow_ar)		{			_myWindow.buttonRefToShow_ar[i]._exulis._objDef["disabled"]=true;			_myWindow.buttonRefToShow_ar[i]._exulis.setInactive();		}			for (var i in _myWindow.buttonRefToHide_ar)		{			_myWindow.buttonRefToHide_ar[i]._exulis._objDef["disabled"]=false;			_myWindow.buttonRefToHide_ar[i]._exulis.setActive();		}					if(_parent._parent._exulis.toolbox.wrapRun("xpath:////box[@id='spreadview']", _parent._parent._exulis._guiSource,"SingleNode") == undefined){			var notFound_bool:Boolean = true;			var _inspector_obj = _parent._parent;						while(notFound_bool){				_inspector_obj = _inspector_obj._parent;				trace("met id: " + _inspector_obj._exulis.id + "  with content: " + _inspector_obj._exulis._type);				if(_inspector_obj._exulis._type == "overlay"){					sourceID_str = _inspector_obj._exulis.id;					notFound_bool = false;				}				if(_inspector_obj == _root){					notFound_bool = false;				}			}			if(sourceID_str == undefined){				trace("XULwindow (onKillWindows) for " + _parent._parent.exulis.id + ": target not found; default target selected");				_parent._parent._visible = false;			}			else{				_parent._parent._exulis.toolbox.wrapRun("as://hide(" + sourceID_str + ")",_parent._parent._exulis);			}		}		else{			_parent._parent._visible = false;		}	}	private function closeWindow(_referer):Void	{		trace("XULwindow (closeWindow) for " + this);for(var nam in this){	trace("XULwindow : this." + nam + " = " + this[nam]);}//		destroy();		var sourceID_str:String;		var cptLev_num:Number = 0;		if(this.toolbox.wrapRun("xpath:////box[@id='spreadview']", this._guiSource,"SingleNode") == undefined){			var notFound_bool:Boolean = true;			var _inspector_obj = (_referer == undefined) ? this._obj : _referer._obj;			var sourceID_str:String;			while(notFound_bool){				cptLev_num++ ;				_inspector_obj = _inspector_obj._parent;				trace("met id: " + _inspector_obj._exulis.id + "  with content: " + _inspector_obj._exulis._type);				if(_inspector_obj._exulis._type == "overlay"){					sourceID_str = _inspector_obj._exulis.id;					notFound_bool = false;				}				if(_inspector_obj == _root){					notFound_bool = false;				}				if(cptLev_num > 50){					notFound_bool = false;				}			}			if(sourceID_str == undefined){				trace("XULwindow (killWindows) for " + id + ": target not found; default target selected");				this._obj._visible = false;			}			else{				toolbox.wrapRun("as://hide(" + sourceID_str + ")",this);			}		}		else{			this._obj._visible = false;		}	}		private function onOverWindows():Void	{		this._alpha=60;		trace("createTitleBar "+this);	}		private function onOutWindows():Void	{		this._alpha=100;	}		private function onDrag():Void	{		this._parent._parent.startDrag();	}		private function onStopDrag():Void	{		this._parent._parent.stopDrag();	}		private function createKillWindowsButton():Void	{				// square		killWindow_mc=currentTitleBar_mc.createEmptyMovieClip("killMc",70);		killWindow_mc.beginFill(0x0066ff,0);		killWindow_mc.lineStyle(1,0xffffff,100);		killWindow_mc.moveTo(0,0);		killWindow_mc.lineTo(12,0);		killWindow_mc.lineTo(12,12);		killWindow_mc.lineTo(0,12);		killWindow_mc.lineTo(0,0);		killWindow_mc.endFill();				// cross				killWindow_mc.lineStyle(1,0xffffff,100);		killWindow_mc.moveTo(2,2);		killWindow_mc.lineTo(10,10);		killWindow_mc.moveTo(2,10);		killWindow_mc.lineTo(10,2);					killWindow_mc._x = currentTitleBar_mc._width - killWindow_mc._width - 4;		killWindow_mc._y = 3;				killWindow();	}}/*		current_mc.createEmptyMovieClip(node.attributes["id"],current_mc._childNextDepth);		local_mc = current_mc[node.attributes["id"]];		local_mc._type = "xul_window";		local_mc._repository = canvas_mc;		if(local_mc._repository._result_matrix == undefined){			local_mc._repository._result_matrix = new Array();		}		if(targetExecutionLayer_mc._garbageCollectorRepository_array == undefined){			targetExecutionLayer_mc._garbageCollectorRepository_array = new Array();		}		local_mc._childNextDepth = 1; // local XUL depth (levels) management		local_mc._x = 0;		local_mc._y = 0;		var thisObj_obj:Object = {objRef:local_mc, objType:"movieClip", xulType:local_mc._type};		targetExecutionLayer_mc._garbageCollectorRepository_array.push(thisObj_obj);*/