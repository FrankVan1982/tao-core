import com.eXULiS.XUL.XULelement;import mx.utils.Delegate;import com.eXULiS.lib.ToolTip;class com.eXULiS.XUL.XULbutton extends XULelement {		public var _obj;	private var _objLabel:TextField;	public var icon_mc:MovieClip;	public var toggleable_bool:Boolean;	public var toggled_bool:Boolean;//	public var toggleState_num:Number; // modulo 2 or 3 (0, 1 or 2 for tri-state); default is 0//	public var toggleModulo_num:Number;	public var group_ref;	public var _invocation_str:String;		private var toolTipOver:ToolTip;		function XULbutton(xulParent,xulDef:XMLNode) {		super(xulParent,xulDef);		_defaultWidth = 100;		_defaultHeight = 22;	}	function create(){		trace("XULbutton (create): button (" + _objDef.attributes["id"] + ") on " + _objParent + " on depth: " + _objParent._childNextDepth);		if(_objDef.attributes["image"] == undefined){			trace("XULbutton with no image attribute");			_objParent.createClassObject(mx.controls.Button,_objDef.attributes["id"],_objParent._childNextDepth);			_obj = super.create(_obj,this,1);			_obj.label = toolbox.wrapRun(_objDef.attributes["label"], _guiSource,"SingleNode","String");			var tButtonEvent_listener = new Object();			tButtonEvent_listener.click = Delegate.create(this, onButtonEvent)			_obj.addEventListener("click", tButtonEvent_listener);		}		else{			trace("XULbutton with image attribute");			_objParent.createEmptyMovieClip(_objDef.attributes["id"],_objParent._childNextDepth);			_obj = super.create(_obj,this,1);			trace("XULbutton: special properties setting");/*			if((_objDef.attributes["checkState"] == "0") || (_objDef.attributes["checkState"] == "1") || (_objDef.attributes["checkState"] == "2")){				toggleModulo_num = (_objDef.attributes["checkState"] == "2") ? 3 : 2;				toggleState_num = parseInt(_objDef.attributes["checkState"]);			}*/			toggleable_bool = ((_objDef.attributes["toggled"] != undefined) || (_objDef.attributes["checked"] != undefined) || (_objDef.attributes["toggleable"] == "true")) ? true : false;			if(toggleable_bool){				toggled_bool = ((_objDef.attributes["toggled"] == "true") || (_objDef.attributes["checked"] == "true")) ? true : false;				group_ref = this._targetExecutionLayer._objDefsRepository.retrieve(_objDef.attributes["group"])._exulis;				if(group_ref == undefined){					group_ref = _objParent._exulis;				}				group_ref.registerGroupMember(this);			}	// attach local properties			drawIcon();			_obj.onPress = Delegate.create(this,pressEvent);			_obj.onRollOver = Delegate.create(this,rollOverEvent);			_obj.onRollOut = Delegate.create(this,rollOutEvent);	//		_obj.onMouseMove = this.mouseMoveEvent;				_obj.setStyle = this.setStyle;								}				_obj = super.applyStyle(_obj);		setLayout();				_objLabel._y = (this.height-_objLabel._height)/2;		_objLabel._x = (this.width-_objLabel._width)/2;		        return _obj;	}		function onButtonEvent(eventObj){		trace("XUL2SWF: fullpath: " + eventObj.target);				trace("feedTrace for BUTTON, Stimulus: " + "id"+_root.FEEDTRACE_PAYLOAD_ATTRIBUTE_NAME_VALUE_SEPARATOR+_objDef.attributes["id"]);		_level0.currentItemRootLevel.feedTrace("BUTTON","id"+_root.FEEDTRACE_PAYLOAD_ATTRIBUTE_NAME_VALUE_SEPARATOR+_objDef.attributes["id"],"stimulus");							for(var vCpt_num:Number = 0;vCpt_num < _actions.length;vCpt_num++){			var vAction_obj:Object = _actions[vCpt_num];			if(vAction_obj.type == "command"){				toolbox.wrapRun(vAction_obj.action,this);								trace("feedTrace for DOACTION, Stimulus: " + "action" + _root.FEEDTRACE_PAYLOAD_ATTRIBUTE_NAME_VALUE_SEPARATOR + vAction_obj.action);				_level0.currentItemRootLevel.feedTrace("DOACTION","action" + _root.FEEDTRACE_PAYLOAD_ATTRIBUTE_NAME_VALUE_SEPARATOR + vAction_obj.action,"stimulus");			}		}	}		function setStyle(propName,propVal){		trace("XULbutton setStyle (" + id + ") propName=" + propName + " propVal=" + propVal);		this["html"] = true;/*		_obj.autoSize = "Left";		_obj.wordWrap = true;		_obj.html = true;		_obj.border = true;				_obj.type = "input";		//_obj.selectable = (_objDef.attributes["disabled"] != undefined ) ? Boolean(_objDef.attributes["disabled"]):null;		_obj.maxChars = (_objDef.attributes["maxlength"] != undefined) ? Number(_objDef.attributes["maxlength"]):null;		_obj.maxChars = (_objDef.attributes["size"] != undefined) ? Number(_objDef.attributes["maxlength"]):null;		_obj.multiline = (_objDef.attributes["multiline"] != undefined) ? Boolean(_objDef.attributes["multiline"]):null;		_obj.wordWrap = (_objDef.attributes["wrap"] != undefined) ? Boolean(_objDef.attributes["wrap"]):null;		//_obj.selectable = (_objDef.attributes["readonly"] != undefined) ? Boolean(_objDef.attributes["readonly"]):null;		_obj.background = (_objDef.attributes["background"] != undefined) ? Boolean(_objDef.attributes["background"]):null;		_obj.password = (_objDef.attributes["type"].lowerCase() == "password") ? true : null;		_obj.htmlText = (_objDef.attributes["value"] != undefined) ? toolbox.wrapRun(_objDef.attributes["value"], _guiSource,"SingleNode","String") : "" ;		_obj.tabIndex = (_objDef.attributes["tabIndex"] != undefined) ? Number(_objDef.attributes["tabIndex"]) : null ;					_obj = super.applyStyle(_obj);*/		switch(propName){			case("size"):			case("maxlength"):			case("max-length"):{				this["_exulis"]["maxChars"] = propVal;				break;			}			case("disabled"):{				this["_exulis"]["selectable"] = ((propVal == "true") || (propVal == "yes") || (propVal == "on") || (propVal == "1")) ? false : true;				break;			}			case("color"):			case("font-color"):			case("fontColor"):			case("text-color"):			case("textColor"):{				this["_exulis"]["textColor"] = String(propVal); //this["_exulis"].colors.getColor(String(propVal));				break;			}			case("background"):{				if((propVal == "true") || (propVal == "yes") || (propVal == "on") || (propVal == "solid")){					this["_exulis"]["background"] = true;				}				else{					this["_exulis"]["backgroundColor"] = this["_exulis"].colors.getColor(String(propVal));					if(this["_exulis"]["backgroundColor"] != undefined){						this["_exulis"]["background"] = true;					}				}				break;			}			case("background-color"):			case("backgroundColor"):{				this["_exulis"]["backgroundColor"] = this["_exulis"].colors.getColor(String(propVal));				if(this["_exulis"]["backgroundColor"] != undefined){					this["_exulis"]["background"] = true;				}				break;			}			case("border"):			case("border-style"):			case("borderStyle"):{				this["_exulis"]["border"] = ((propVal == "none") || (propVal == "0")) ? false : true;				break;			}			case("border-color"):			case("borderColor"):{				this["_exulis"]["borderColor"] = this["_exulis"].colors.getColor(String(propVal));				if(this["_exulis"]["borderColor"] != undefined){					this["_exulis"]["border"] = true;				}				break;			}			case("border-size"):			case("borderSize"):{				this["_exulis"]["borderSize"] = (isNaN(propVal)) ? undefined : propVal;				break;			}			case("multiline"):			case("password"):{				this["_exulis"][propName] = ((propVal == "true") || (propVal == "yes") || (propVal == "on") || (propVal == "1")) ? true : false;				break;			}			case("readonly"):			case("read-only"):			case("readOnly"):{				this["_exulis"]["readOnly"] = ((propVal == "true") || (propVal == "yes") || (propVal == "on") || (propVal == "1")) ? true : false;				break;			}			case("plain-text"):{				this["_exulis"]["html"] = false;				break;			}			case("font-weight"):			case("fontWeight"):{				this["_exulis"]["fontWeight"] = ((propVal == "bold") || (propVal == "bolder")) ? true : false;				break;			}			case("word-wrap"):			case("wordWrap"):{				this["_exulis"]["wordWrap"] = ((propVal == "true") || (propVal == "yes") || (propVal == "on") || (propVal == "1")) ? true : false;				break;			}			case("font-size"):			case("fontSize"):{				this["_exulis"]["fontSize"] = String(propVal);				break;			}			case("font-family"):			case("fontFamily"):{				this["_exulis"]["fontFamily"] = (propVal != "") ? propVal : "";				break;			}			case("font-style"):			case("fontStyle"):{				this["_exulis"]["fontStyle"] = (propVal != "italic") ? false : true;				break;			}			case("text-decoration"):			case("textDecoration"):{				this["_exulis"]["textDecoration"] = (propVal != "underline") ? false : true;				break;			}			case("text-align"):			case("textAlign"):{				this["_exulis"]["textAlign"] = (propVal != "") ? propVal : "";				break;			}			default:{				this["_exulis"][propName] = propVal;			}		}	}		function setLayout(){		trace("XULbutton: setLayout for " + id + ": special properties setting, top:" + this.top + " left:" + this.left + " width:" + this.width + " height:" + this.height);		if(_objDef.attributes["image"] == undefined){			_obj.move(this.left,this.top);			_obj.setSize(this.width,this.height);		}		else{			_obj._x = _obj._exulis.left;			_obj._y = _obj._exulis.top;	//		_obj.focusEnabled = true;	//		_obj._focusrect = true;			_objLabel = _obj.createTextField(_objDef.attributes["id"] + "_label", _obj._childNextDepth+100, 0, 0,0, 10);			_objLabel.type = "dynamic"			//_objLabel.multiline=true;			_objLabel.autoSize="Left";						_objLabel.html = true;			_objLabel.htmlText = ((_objDef.attributes["label"] != undefined) && (_objDef.attributes["label"] != "")) ? toolbox.wrapRun(_objDef.attributes["label"], _guiSource,"SingleNode","String") : "";			_obj._visible = this._visibilityState;		}						if(_objDef.attributes["image"] != undefined){			var finalText_str:String;			finalText_str = ((_objDef.attributes["label"] != undefined) && (_objDef.attributes["label"] != "")) ? toolbox.wrapRun(_objDef.attributes["label"], _guiSource,"SingleNode","String") : ((_objDef.firstChild.nodeValue == undefined) ? "" : toolbox.wrapRun(_objDef.firstChild.nodeValue, _guiSource,"SingleNode","String"));						finalText_str = (this["fontWeight"]) ? "<b>" +finalText_str+ "</b>" : finalText_str;			finalText_str = (this["fontStyle"]) ? "<i>" +finalText_str+ "</i>" : finalText_str;			finalText_str = (this["textDecoration"]) ? "<u>" +finalText_str+ "</u>" : finalText_str;			if ((this["fontSize"] != "") || (this["fontFamily"] != "") || (this["textColor"] != ""))				finalText_str = "<font" + ((this["fontSize"] != "") ? " size='" + this["fontSize"] + "'" : "") + ((this["fontFamily"] != "") ? " face='" + this["fontFamily"] + "'" : "") + ((this["textColor"] != "") ? " color='" + this["textColor"] + "'" : "") + ">" + finalText_str + "</font>";			finalText_str = (_invocation_str == undefined) ? finalText_str : "<A HREF='" + _invocation_str + "'>" + finalText_str + "</A>";			finalText_str = "<div style='vertical-align: middle'>" + finalText_str + "</div>"; 			finalText_str = "<p align='" + ((this["textAlign"] != "") ? "center":this["textAlign"]) + "'>" +finalText_str+ "</p>";						//trace("finalText_str: " + finalText_str);			_objLabel.htmlText = finalText_str;		}	}		public function setState(status_str){		trace("XULbutton: setState for " + this._obj + " with status:" + status_str);		if(status_str == "checked"){			toggled_bool = true;			for(var vCpt_num:Number = 0;vCpt_num < _actions.length;vCpt_num++){				var vAction_obj:Object = _actions[vCpt_num];				if(vAction_obj.type == "command"){					toolbox.wrapRun(vAction_obj.action,this);				}			}			if(this._obj["imagePress_mc"] != undefined){				for(var nam in this._obj){					var vTmp_str:String = String(nam);					if(vTmp_str.substr(0,5) == "image"){						if(vTmp_str == "imagePress_mc"){							this._obj[nam]._visible = true;						}						else{							this._obj[nam]._visible = false;						}					}				}			}		}		if(status_str == "not-checked"){			toggled_bool = false;			if(this._obj["imagePress_mc"] != undefined){				for(var nam in this._obj){					var vTmp_str:String = String(nam);					if(vTmp_str.substr(0,5) == "image"){						if(vTmp_str == "image_mc"){							this._obj[nam]._visible = true;						}						else{							this._obj[nam]._visible = false;						}					}				}			}		}	}	function pressEvent(){		trace("XULbutton: onPress on " + this._obj);		toolTipOver.removeToolTip();				if(toggleable_bool){			group_ref.setGroupFocus(this);		}		else{			trace("feedTrace for BUTTON, Stimulus: " + "id"+_root.FEEDTRACE_PAYLOAD_ATTRIBUTE_NAME_VALUE_SEPARATOR+_objDef.attributes["id"]);			_level0.currentItemRootLevel.feedTrace("BUTTON","id"+_root.FEEDTRACE_PAYLOAD_ATTRIBUTE_NAME_VALUE_SEPARATOR+_objDef.attributes["id"],"stimulus");			for(var vCpt_num:Number = 0;vCpt_num < _actions.length;vCpt_num++){				var vAction_obj:Object = _actions[vCpt_num];				if(vAction_obj.type == "command"){					toolbox.wrapRun(vAction_obj.action,this);										trace("feedTrace for DOACTION, Stimulus: " + "action"+_root.FEEDTRACE_PAYLOAD_ATTRIBUTE_NAME_VALUE_SEPARATOR+vAction_obj.action);					_level0.currentItemRootLevel.feedTrace("DOACTION","action"+_root.FEEDTRACE_PAYLOAD_ATTRIBUTE_NAME_VALUE_SEPARATOR+vAction_obj.action,"stimulus");				}			}		}	}		function rollOverEvent(){		trace("XULbutton: onRollOver on " + this._obj);				// return hint				var hint_str:String=toolbox.wrapRun(_objDef.attributes["tooltiptext"], _guiSource,"SingleNode","String");				if (hint_str!=undefined & hint_str!="")		toolTipOver=new ToolTip(hint_str,this._obj);				if(this._obj["imageRollOver_mc"] != undefined){			for(var nam in this._obj){				var vTmp_str:String = String(nam);				if(vTmp_str.substr(0,5) == "image"){					if(vTmp_str == "imageRollOver_mc"){						this._obj[nam]._visible = true;					}					else{						this._obj[nam]._visible = false;					}				}			}		}//		Mouse.hide();//		this.attachMovie("cursor_help_id", "cursor_mc", this.getNextHighestDepth(), {_x:this._xmouse, _y:this._ymouse});//		this._exulis.drawIcon();	}	function rollOutEvent() {		trace("XULbutton: onRollOut on " + this._obj);				toolTipOver.removeToolTip();				if(toggled_bool){			group_ref.setGroupFocus(this);		}		else{			for(var nam in this._obj){				var vTmp_str:String = String(nam);				if(vTmp_str.substr(0,5) == "image"){					if(vTmp_str == "imageRollOut_mc"){						this[nam]._visible = true;					}					else{						this[nam]._visible = false;					}				}			}		}//		Mouse.show();//		this.cursor_mc.removeMovieClip();	};	function mouseMoveEvent(){		trace("XULbutton (mouseMoveEvent): " + this);//		this.cursor_mc._x = this._xmouse;//		this.cursor_mc._y = this._ymouse;	};	function drawIcon(){		trace("XULbutton: DRAW on " + id);		for(var objAttr in this._objDef.attributes){			trace("XULbutton: DRAW (" + objAttr + ") scanned");			switch(objAttr){				case "image":				case "imageDisabled":				case "imagePress":				case "imageRollOver":				case "imageRollOut":				case "imageChecked":				case "imageMouseNormal":				case "imageMouseDisabled":				{					var vImage_str:String = this._objDef.attributes[objAttr];					if(vImage_str != undefined){						if(vImage_str != ""){							_obj.createEmptyMovieClip(objAttr + "_mc",this._childNextDepth++);							var vImage_mc = _obj[objAttr + "_mc"];							var vImage_loader = new MovieClipLoader();							vImage_loader.onLoadInit = function(target_mc:MovieClip) {//		trace("XULbutton target_mc._parent.width:" + target_mc._parent.width + "  target_mc._width:" + target_mc._width);//		for(var nam in target_mc){//			trace("TOTO (" + target_mc + "): ." + nam + " = " + target_mc[nam]);//		}//		for(var nam in target_mc._parent._exulis){//			trace("TOTO (" + target_mc + "): ._parent._exulis." + nam + " = " + target_mc._parent._exulis[nam]);//		}								target_mc._x = (target_mc._parent._exulis.width - target_mc._width)/2;			//					trace("XULbutton: (drawIcon) placement: " + target_mc._parent._parent._exulis.id);			//					trace("XULbutton: (drawIcon) placement: " + target_mc._parent._parent._obj.labelPlacement);								if(target_mc._parent._obj.labelPlacement == "bottom"){									target_mc._y =  (target_mc._parent._exulis.height - 22 - target_mc._height)/2;								}								else{									target_mc._y = ((target_mc._parent._exulis.height - target_mc._height)/2);								}//trace("TOTO > target_mc:" + target_mc._name);//for(var nam in target_mc){//	trace("TOTO >> " + nam + ":" + target_mc[nam]);//}//trace("TOTO > objAttr:" + objAttr);								var vTmpButtonName_str:String = target_mc._name;								target_mc._visible = (vTmpButtonName_str.substr(0,-3) == "image") ? true : false;								if(target_mc._parent._exulis.toggled_bool){									target_mc._parent._exulis.group_ref.setGroupFocus(target_mc._parent._exulis);								}//								target_mc._visible = ((vTmpButtonName_str.substr(0,-3) == "image") && (!target_mc._parent._exulis.toggled_bool)) ? true : false;//								target_mc._visible = ((vTmpButtonName_str.substr(0,-3) == "imageChecked") && (target_mc._parent._exulis.toggled_bool)) ? true : false;							};							var vImageTarget_str:String = this.toolbox.wrapRun(vImage_str, _guiSource,"SingleNode","String");							vImage_loader.loadClip(vImageTarget_str,vImage_mc);							trace("XULbutton: DRAW " + vImageTarget_str + "(" + vImage_mc.getDepth() + ") for " + objAttr);						}					}				}			}		}/*		_obj.attachMovie("emptyContent","hitZone_mc",this._childNextDepth++);		var vImageHZ_mc = _obj["hitZone_mc"];		vImageHZ_mc._x = 0;		vImageHZ_mc._y = 0;		vImageHZ_mc._width = width;		vImageHZ_mc._height = height;		_obj.hitArea = vImageHZ_mc;*/	}	function destroy(){		trace("XULbutton (destroy) for " + id + ": " + _objDescendants.length + " children to be deleted");		for(var vCpt=0;vCpt < _objDescendants.length;vCpt++){			_objDescendants[vCpt]._exulis.destroy();		}		_obj.destroyObject(id);		this.removeMovieClip();	}}