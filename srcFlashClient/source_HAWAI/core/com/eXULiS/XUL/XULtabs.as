import com.eXULiS.XUL.XULelement;import mx.transitions.Tween;import mx.utils.Delegate;import flash.filters.GlowFilter;import com.eXULiS.XUL.*;class com.eXULiS.XUL.XULtabs extends XULelement {	var _obj:MovieClip;	public var _group_array:Array;	var leaderIndicator_ref;	private var myMask_mc:MovieClip;		private var listTabButton_mc:MovieClip;	private var closeListTab_mc:MovieClip;	private var backListTab_mc:MovieClip;		private var listTab_mc:MovieClip;	private var nbrOfVisibleTabs_nbr:Number;	private var glow:GlowFilter;	private var glowList:GlowFilter;	private var alphaGlow_nbr:Number;		private var zeDatas_array:Array;	private var linkedPanels_ar:Array;	public var mylistTab;	public var _dataprovider;//	var addMenuItem:Function;	function XULtabs(xulParent,xulDef:XMLNode) {		super(xulParent,xulDef);		trace("XULtabs: relay given to XULelement with xulParent = " + xulParent);	}	public function create(){		trace("XULtabs: create menu popup (" + _objDef.attributes["id"] + ") on " + _objParent + " on depth: " + _objParent._childNextDepth);		_group_array = new Array();		_objParent.createEmptyMovieClip(_objDef.attributes["id"],_objParent._childNextDepth);// complete the object definition with the ancestor class definition		_obj = super.create(_obj,this,1);		_obj.setStyle = this.setStyle;		_obj = super.applyStyle(_obj);		nbrOfVisibleTabs_nbr=0;				linkedPanels_ar=new Array();				setLayout();				createMask();				//displayTabChooser();		createList();								onLoad();// attach local properties		trace("XULtabs: special properties setting")//		_obj.addMenuItem = this.addMenuItem;;		return _obj;	}	public function registerLinkedPanels(panelMember){//		trace("myTAB registerLinkedPanels");		linkedPanels_ar.push(panelMember);	}	private function updateLinkedPanels(){//		trace("myTAB updateLinkedPanels");		for (var j in linkedPanels_ar){			linkedPanels_ar[j].redimTabPanels();		}	}	public function getTabsNumber():Number{//		trace("myTAB getTabsNumber");		var _numberOfTab_nbr:Number=0;		for (var a in _group_array){			if (_group_array[a]._visibilityState==true){				_numberOfTab_nbr++;			}		}		return _numberOfTab_nbr;	}	function registerGroupMember(aMember){		trace("XULtabs: registerGroupMember triggered");		_group_array.push(aMember);		updateTabManager();	}		public function setDataProvider(myXml:XML){//		trace("myTAB setDataProvider");		trace("myList setDataProvider "+myXml);		_dataprovider=myXml;	}		public function populateTabChooser(_dp){//		trace("myTAB populateTabChooser");		var count_nbr:Number=0;				for (var a=0;a<_dp.childNodes.length;a++){			var _zeTabs=this._targetExecutionLayer._objDefsRepository.retrieve(_dp.childNodes[a].attributes.tab)._exulis;						trace("myTAB _zeTabs "+_zeTabs);						mylistTab.addItem({label:_dp.childNodes[a].attributes.label,data:_zeTabs});			count_nbr++;		}	}	public function displayTabChooser(){//		trace("myTAB displayTabChooser");		listTabButton_mc=_objParent.createEmptyMovieClip("myButton",_objParent._childNextDepth);		_objParent._childNextDepth++;		// default visible is false, waiting that there is more than 1 tab displayed		listTabButton_mc._visible=false;		listTabButton_mc.beginFill(0xff00ff,0);		listTabButton_mc.moveTo(0,0);		listTabButton_mc.lineTo(13,0);		listTabButton_mc.lineTo(13,15);		listTabButton_mc.lineTo(0,15);		listTabButton_mc.lineTo(0,0);		listTabButton_mc.endFill();		listTabButton_mc.lineStyle(2, 0x666666, 100);		listTabButton_mc.moveTo(2,8);		listTabButton_mc.lineTo(7,15);		listTabButton_mc.lineTo(12,8);		listTabButton_mc._x=_objParent._width-listTabButton_mc._width-3;		listTabButton_mc._y=_obj._height-listTabButton_mc._height-3;		listTabButton_mc.onPress = Delegate.create(this,pressEvent);		listTabButton_mc.onRollOver = Delegate.create(this,overEvent);		listTabButton_mc.onRollOut = Delegate.create(this,outEvent);	}	public function createList(){//		trace("myTAB createList");		// create master container for list and close button		listTab_mc=_objParent.createEmptyMovieClip("myListTab",_objParent._childNextDepth+7054);		_objParent._childNextDepth++;		// default visible state		listTab_mc._visible=false;		// create list tab		mylistTab=listTab_mc.createClassObject(mx.controls.List, "myList", 10);		mylistTab.setSize(120,154);		// hide left grey scroll path		mylistTab.vScrollPolicy="off";		// list no-border		mylistTab.setStyle("borderStyle","none");		// alternate color 		mylistTab.setStyle("alternatingRowColors",[0xFFFFFF, 0xBFBFBF]);				// add listener on row click		mylistTab.addEventListener('change', this);				/*		// create close button container		backListTab_mc=listTab_mc.createEmptyMovieClip("myOpenButton",20);				// fill with background color to connect with list (necessary to stay static during out and over close state)		backListTab_mc.beginFill(0xffffff,100);		backListTab_mc.moveTo(0,0);		backListTab_mc.lineTo(20,0);		backListTab_mc.lineTo(20,13);		backListTab_mc.lineTo(0,13);		backListTab_mc.lineTo(0,0);		backListTab_mc.endFill();				// create close button		closeListTab_mc=listTab_mc.createEmptyMovieClip("myCloseButton",30);				// background button		closeListTab_mc.beginFill(0xffff00,0);		closeListTab_mc.moveTo(0,0);		closeListTab_mc.lineTo(20,0);		closeListTab_mc.lineTo(20,13);		closeListTab_mc.lineTo(0,13);		closeListTab_mc.lineTo(0,0);		closeListTab_mc.endFill();				// create close button icon		closeListTab_mc.lineStyle(2, 0x666666, 100);		closeListTab_mc.moveTo(6,8);		closeListTab_mc.lineTo(11,2);		closeListTab_mc.lineTo(16,8);*/				// move background button to his position		backListTab_mc._x=mylistTab.width-backListTab_mc._width;		backListTab_mc._y=mylistTab._height-2;				// move button to position (on the background button)		/*closeListTab_mc._x=mylistTab.width-closeListTab_mc._width;		closeListTab_mc._y=mylistTab._height-2;*/				// create outer glow delimiter on master container		glowList = new GlowFilter(0x000000, 0.6, 4, 4, 2, 3);		listTab_mc.filters = [glowList];				// window placement, move master container to position		listTab_mc._x=listTabButton_mc._x-listTab_mc._width+listTabButton_mc._width+3;		listTab_mc._y=listTabButton_mc._height+4;				// close button state		/*closeListTab_mc.onPress = Delegate.create(this,pressCloseEvent);		closeListTab_mc.onRollOver = Delegate.create(this,overCloseEvent);		closeListTab_mc.onRollOut = Delegate.create(this,outCloseEvent);*/	}	private function change(evt_obj){	//		trace("myTAB change");		setGroupFocus(evt_obj.target.selectedItem.data);	}	public function onLoad(){//		trace("myTAB onLoad");		for(var vCpt_num:Number = 0;vCpt_num < _actions.length;vCpt_num++){			var vAction_obj:Object = _actions[vCpt_num];			if(vAction_obj.type == "load"){				trace("XULtabs: fullpath onload");				toolbox.wrapRun(vAction_obj.action,this);			}		}			}	public function updateTabManager(){		//listTab_mc.removeAll();				var _tabNumber_nb:Number=getTabsNumber();//		trace("myTAB updateTabManager _tabNumber_nb = " + _tabNumber_nb);		if (_tabNumber_nb<2){			listTabButton_mc._visible=false;			_obj._visible=false;			updateLinkedPanels();		} 		else{			listTabButton_mc._visible=true;			_obj._visible=true;		}	}		public function addNewTab(){//		trace("myTAB addNewTab");		// set new tab		mylistTab.removeAll();		var _tabsNumber_nb:Number=getTabsNumber();//		trace("myTAB addNewTab getTabsNumber() "+getTabsNumber());				if (_tabsNumber_nb<11){			for (var a=0;a<_group_array.length;a++){//				trace("myTAB addNewTab _group_array.length "+_group_array.length);				if (_group_array[a]._visibilityState!=true){					_group_array[a]._visibilityState=true;					_group_array[a].activeTab_bool=true;					_group_array[a].setState("checked");					setGroupFocus(_group_array[a]);//					trace("myTAB addNewTab _group_array[a] "+_group_array[a]);					break;				} 			}		}				// set page to defaut				// set page to visible				// set other to visible false		displayTabs();		updateTabManager();	}	private function displayTabs(){//		trace("myTAB displayTabs _group_array "+_group_array);		var xCoord=0;		mylistTab.removeAll();		for (var a=0;a<_group_array.length;a++){			if (_group_array[a]._visibilityState==true){				_group_array[a]._obj._visible=true;				_group_array[a]._obj._x=xCoord;				xCoord+=140;				mylistTab.addItem({label:_group_array[a]._objLabel.text,data:_group_array[a]});			} 			else{				_group_array[a]._obj._visible=false;			}		}	}	public function closeTab(){//		trace("myTAB closeTab");/*		for (var a=0;a<_group_array.length;a++){			var str_str:String = "";			for(var elem in _group_array[a]){				str_str += "{" + elem + ":" + _group_array[elem] + "}"; 			}			trace("myTAB closeTab _group_array[" + a + "] = " + str_str);		}*/		// remove tab		for (var a=0;a<_group_array.length;a++){			if (_group_array[a]==leaderIndicator_ref){				_group_array[a]._visibilityState=false;				_group_array[a].activeTab_bool=false;				_group_array[a].setState("not-checked");				//empty Index				_group_array[a]._historyCurrentIndex_num=0;				emptyArray(_group_array[a]._history_array);				// reset first page				_group_array[a].linkedPanel_str=_group_array[a]._objDef.attributes.linkedpanel;			} 		}		// set New Tab Leader		for (var a=0;a<_group_array.length;a++){			if (_group_array[a]._visibilityState==true){				_group_array[a].activeTab_bool=true;				_group_array[a].setState("checked");				setGroupFocus(_group_array[a]);				break;			}		}		displayTabs();		updateTabManager();	}			private function pressEvent(){		// press list tab button		//var _listVisibility_bool=(listTab_mc._visible==false) ? true : false;		//addNewTab();		listTabButton_mc.clear();				listTabButton_mc.beginFill(0xff00ff,0);		listTabButton_mc.moveTo(0,0);		listTabButton_mc.lineTo(13,0);		listTabButton_mc.lineTo(13,15);		listTabButton_mc.lineTo(0,15);		listTabButton_mc.lineTo(0,0);		listTabButton_mc.endFill();						if (listTab_mc._visible==true)		{		listTab_mc._visible=false;		listTabButton_mc.lineStyle(2, 0x666666, 100);		listTabButton_mc.moveTo(2,8);		listTabButton_mc.lineTo(7,15);		listTabButton_mc.lineTo(12,8);		} else			{				listTab_mc._visible=true;				listTabButton_mc.lineStyle(2, 0x666666, 100);				listTabButton_mc.moveTo(2,15);				listTabButton_mc.lineTo(7,8);				listTabButton_mc.lineTo(12,15);			}			//	glow = new GlowFilter(0x4292ff, 0, 4, 4, 2, 3);	//	listTabButton_mc.filters = [glow];			}		private function overEvent(){	//	glow = new GlowFilter(0x4292ff, 1, 4, 4, 2, 3);	//	listTabButton_mc.filters = [glow];	}		private function outEvent(){	//	glow = new GlowFilter(0x4292ff, 0, 4, 4, 2, 3);	//	listTabButton_mc.filters = [glow];	}		private function pressCloseEvent(){		// press list tab button		listTab_mc._visible=false;		listTabButton_mc._visible=true;	//	glow = new GlowFilter(0x4292ff, 0, 4, 4, 2, 3);	//	closeListTab_mc.filters = [glow];			}		private function overCloseEvent(){		//glow = new GlowFilter(0x4292ff, 1, 4, 4, 2, 3);		//closeListTab_mc.filters = [glow];	}		private function outCloseEvent(){	//	glow = new GlowFilter(0x4292ff, 0, 4, 4, 2, 3);	//	closeListTab_mc.filters = [glow];	}		// mask zone to mask the overflow tabs	public function createMask(){		myMask_mc=_objParent.createEmptyMovieClip("zeMask"+_objParent._childNextDepth,_objParent._childNextDepth);		_objParent._childNextDepth++;		myMask_mc.beginFill(0xff0000,100);		myMask_mc.moveTo(0,0);		myMask_mc.lineTo(10,0);		myMask_mc.lineTo(10,10);		myMask_mc.lineTo(0,10);		myMask_mc.lineTo(0,0);		myMask_mc.lineTo(0,0);		myMask_mc._x=_obj._x;		myMask_mc._y=_obj._y;		myMask_mc._width=_obj._width;		myMask_mc._height=_obj._height;				_obj.setMask(myMask_mc);			}			public function setGroupFocus(newLeader){		// trouve sa place				// trouve le nombre affiché				// trouve sa position				// si tab > 5 slide				/*if (getTabsNumber()>5)		{		var moovX=new Tween(_obj,"_x",null,_obj._x,_obj._x-143,14);		}*/		newLeader = (newLeader == undefined) ? leaderIndicator_ref : newLeader;				for(var vCpt_num:Number = 0;vCpt_num<_group_array.length;vCpt_num++){//			if(_group_array[vCpt_num].activeTab_bool == false){//				break;//			}			if(_group_array[vCpt_num] == newLeader){				leaderIndicator_ref = _group_array[vCpt_num];				trace("XULtabs: setGroupFocus triggered NEWLEADER");			}			else{				_group_array[vCpt_num].setState("not-checked");			}		}		leaderIndicator_ref.setState("checked");		//trace("myTab "+leaderIndicator_ref._obj);	}	public function setStyle(propName,propVal){		trace("XULtabs: propName=" + propName + " propVal=" + propVal);		switch(propName){			case("background"):			case("background-color"):			case("backgroundColor"):{				this["_exulis"]["backgroundColor"] = this["_exulis"].colors.getColor(String(propVal));				if(this["_exulis"]["backgroundColor"] != undefined){					this["_exulis"]["background"] = true;				}				break;			}			default:{				this["_exulis"][propName] = propVal;			}		}	}	public function setLayout(){		trace("XULtabs (setLayout): " + _type + " for " + id + ": special properties setting, top:" + this.top + " left:" + this.left);		if(this["backgroundColor"] == undefined){			//		}		else{//			_obj.backgroundColor = this["backgroundColor"];			_obj.beginFill(this["backgroundColor"]);//0xFFCC99			_obj.moveTo(0, 0);			_obj.lineTo(this.width, 0);			_obj.lineTo(this.width, this.height);			_obj.lineTo(0, this.height);			_obj.lineTo(0, 0);			_obj.endFill();		}		_obj._y = this.top;		_obj._x = this.left;}	public function addMenuItem(menuInitObj_obj:Object){		trace("XULtabs: add a menu item (" + menuInitObj_obj.toString() + ") on " + _objParent + " on depth: " + _objParent._childNextDepth);		_objParent.addMenuItem(menuInitObj_obj);	}		private function emptyArray(zeArray_ar){//		trace("myTab before"+zeArray_ar);		while(zeArray_ar.length>0)		{			zeArray_ar.pop();		}//		trace("myTab after"+zeArray_ar);	}	}