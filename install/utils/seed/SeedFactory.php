<?php

/**
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; under version 2
 * of the License (non-upgradable).
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 *
 * Copyright (c) 2019 (original work) Open Assessment Technologies SA;
 *
 *
 */

namespace oat\tao\install\utils\seed;

use oat\oatbox\extension\AbstractAction;
use oat\oatbox\user\UserLanguageService;
use oat\oatbox\service\ConfigurableService;
use oat\oatbox\Configurable;
use oat\tao\model\service\InjectionAwareService;
use oat\taoDevTools\actions\ExtensionsManager;
use oat\oatbox\user\UserService;
use oat\tao\model\TaoOntology;
use oat\generis\model\GenerisRdf;

/**
 * Factory that generates seed based on current install
 */
class SeedFactory extends AbstractAction
{
    
    public function __invoke($params)
    {
        if (count($params) != 1) {
            return new \common_report_Report(\common_report_Report::TYPE_ERROR, 'Usage: ' . __CLASS__ . ' OUT_FILE');
        }
        $file = array_shift($params);
        $extensions = $this->getServiceLocator()->get(\common_ext_ExtensionsManager::SERVICE_ID)->getInstalledExtensions();
        $seed = [
            'seed' => [
                'author' => 'autogenerated'
            ],
            'extensions' => array_keys($extensions),
            'super-user' => [
                'login' => $this->getRootLogin(),
                'password' => 'adminAdmin1!'
            ],
            'configuration' => [
                'global' => [
                    "lang" => $this->getServiceLocator()->get(UserLanguageService::SERVICE_ID)->getDefaultLanguage(),
                    "mode" => "debug",
                    "instance_name" => GENERIS_INSTANCE_NAME,
                    "namespace" => LOCAL_NAMESPACE,
                    "url" => ROOT_URL,
                    "file_path" => FILES_PATH,
                    "root_path" => ROOT_PATH,
                    "timezone" => TIME_ZONE,
                    "import_data" => false
                ]
            ],
            'postInstall' => []
        ];
        foreach ($extensions as $extension) {
            $configDir = ROOT_PATH . 'config/' . $extension->getId();
            if (file_exists($configDir)) {
                //$extension = new \common_ext_Extension($id);
                $files = \tao_helpers_File::scandir(ROOT_PATH . 'config/' . $extension->getId(), ['only' => \tao_helpers_File::SCAN_FILE]);
                $extSeed = [];
                foreach ($files as $configFile) {
                    $configKey = substr($configFile, 0, strpos($configFile, '.'));
                    $serviceKey = $extension->getId() . '/' . $configKey;
                    $value = $this->getServiceLocator()->get($serviceKey);
                    if (!$value instanceof InjectionAwareService) {
                        $defaultSeed = $this->transform($this->getDefaultValue($serviceKey));
                        $valueSeed = $this->transform($value);
                        if ($defaultSeed != $valueSeed) {
                            $extSeed[$configKey] = $valueSeed;
                        }
                    }
                }
                if (!empty($extSeed)) {
                    $seed['configuration'][$extension->getId()] = $extSeed;
                }
            }
        }
        // should never be included, not a real config
        unset($seed['configuration']['generis']['installation']);
        // should probably not be included, could lead to duplicates
        unset($seed['configuration']['generis']['event']);
        
        // currently broken, leads to duplicate read models
        unset($seed['configuration']['generis']['ontology']);
        // does not serialize correctly
        unset($seed['configuration']['generis']['uriProvider']);
        // should never be included
        unset($seed['configuration']['tao']['taskLog']);
        // broken as events get triggered bfore permission provider tables are created
        unset($seed['configuration']['generis']['permissions']);
        // does not serialize correctly
        unset($seed['configuration']['tao']['taskQueue']);
        // snafu
        unset($seed['configuration']['taoAct']['DeliveryStatus']);
        // duplicate registration
        unset($seed['configuration']['taoQtiTest']['QtiCommunicationService']['options']['channels']['input']['heartbeat']);
        // failed serialization
        unset($seed['configuration']['tao']['requiredAction']);
        // import/export handler serialization failing
        unset($seed['configuration']['taoQtiTest']['TestModel']);
        unset($seed['configuration']['taoQtiItem']['ItemModel']);

        // custom seed format
        //$seed['configuration']['generis']['persistences'] = $seed['configuration']['generis']['persistences']['options']['persistences'];
        
        file_put_contents($file, json_encode($seed, JSON_PRETTY_PRINT));
        return new \common_report_Report(\common_report_Report::TYPE_SUCCESS, 'Wrote seed to file ' . $file);
    }

    private function getRootLogin(): string
    {
        $rootUserId = LOCAL_NAMESPACE . TaoOntology::DEFAULT_USER_URI_SUFFIX;
        $user = $this->getServiceLocator()->get(UserService::SERVICE_ID)->getUser($rootUserId);
        return $user->getPropertyValues(GenerisRdf::PROPERTY_USER_LOGIN)[0];
    }

    private function getDefaultValue($serviceId)
    {
        [$extensionId, $subkey] = explode('/', $serviceId, 2);
        $extManager = $this->getServiceLocator()->get(\common_ext_ExtensionsManager::SERVICE_ID);
        $ext = $extManager->getExtensionById($extensionId);
        $path = $ext->getDir() . 'config/default/' . $subkey . '.conf.php';
        if (file_exists($path)) {
            $config = include $path;
            return $config;
        } else {
            return null;
        }
    }

    private function transform($value)
    {
        if (is_object($value) && $value instanceof Configurable) {
            $returnValue = [
                'type' => $value instanceof ConfigurableService ? "configurableService" : "configurable",
                'class' => get_class($value),
                'options' => $this->transform($value->getOptions())
            ];
        } elseif (is_array($value)) {
            $returnValue = [];
            foreach ($value as $key => $val) {
                $returnValue[$key] = $this->transform($val);
            }
        } else {
            $returnValue = $value;
        }
        return $returnValue;
    }
}
